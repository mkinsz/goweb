// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.14.0
// source: msp.cnt.proto

package proto

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type EDATAST int32

const (
	EDATAST_EDTOK    EDATAST = 0
	EDATAST_EDTTOKEN EDATAST = 1
	EDATAST_EDTLINK  EDATAST = 2
	EDATAST_EDTMSG   EDATAST = 3
)

// Enum value maps for EDATAST.
var (
	EDATAST_name = map[int32]string{
		0: "EDTOK",
		1: "EDTTOKEN",
		2: "EDTLINK",
		3: "EDTMSG",
	}
	EDATAST_value = map[string]int32{
		"EDTOK":    0,
		"EDTTOKEN": 1,
		"EDTLINK":  2,
		"EDTMSG":   3,
	}
)

func (x EDATAST) Enum() *EDATAST {
	p := new(EDATAST)
	*p = x
	return p
}

func (x EDATAST) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDATAST) Descriptor() protoreflect.EnumDescriptor {
	return file_msp_cnt_proto_enumTypes[0].Descriptor()
}

func (EDATAST) Type() protoreflect.EnumType {
	return &file_msp_cnt_proto_enumTypes[0]
}

func (x EDATAST) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EDATAST.Descriptor instead.
func (EDATAST) EnumDescriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{0}
}

type EDEVTYPE int32

const (
	EDEVTYPE_EDEVALL   EDEVTYPE = 0
	EDEVTYPE_EDEVASVR  EDEVTYPE = 2
	EDEVTYPE_EDEVIN    EDEVTYPE = 3
	EDEVTYPE_EDEVOUT   EDEVTYPE = 4
	EDEVTYPE_EDEVBOX   EDEVTYPE = 6
	EDEVTYPE_EDEVTX    EDEVTYPE = 7
	EDEVTYPE_EDEVRX    EDEVTYPE = 8
	EDEVTYPE_EDEVDEC   EDEVTYPE = 9
	EDEVTYPE_EDEVVSVR  EDEVTYPE = 15
	EDEVTYPE_EDEVNMC   EDEVTYPE = 16
	EDEVTYPE_EDEV1837  EDEVTYPE = 17
	EDEVTYPE_EDEVMPU   EDEVTYPE = 18
	EDEVTYPE_EDEVDANTE EDEVTYPE = 19
)

// Enum value maps for EDEVTYPE.
var (
	EDEVTYPE_name = map[int32]string{
		0:  "EDEVALL",
		2:  "EDEVASVR",
		3:  "EDEVIN",
		4:  "EDEVOUT",
		6:  "EDEVBOX",
		7:  "EDEVTX",
		8:  "EDEVRX",
		9:  "EDEVDEC",
		15: "EDEVVSVR",
		16: "EDEVNMC",
		17: "EDEV1837",
		18: "EDEVMPU",
		19: "EDEVDANTE",
	}
	EDEVTYPE_value = map[string]int32{
		"EDEVALL":   0,
		"EDEVASVR":  2,
		"EDEVIN":    3,
		"EDEVOUT":   4,
		"EDEVBOX":   6,
		"EDEVTX":    7,
		"EDEVRX":    8,
		"EDEVDEC":   9,
		"EDEVVSVR":  15,
		"EDEVNMC":   16,
		"EDEV1837":  17,
		"EDEVMPU":   18,
		"EDEVDANTE": 19,
	}
)

func (x EDEVTYPE) Enum() *EDEVTYPE {
	p := new(EDEVTYPE)
	*p = x
	return p
}

func (x EDEVTYPE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EDEVTYPE) Descriptor() protoreflect.EnumDescriptor {
	return file_msp_cnt_proto_enumTypes[1].Descriptor()
}

func (EDEVTYPE) Type() protoreflect.EnumType {
	return &file_msp_cnt_proto_enumTypes[1]
}

func (x EDEVTYPE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EDEVTYPE.Descriptor instead.
func (EDEVTYPE) EnumDescriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{1}
}

type EMMETH int32

const (
	EMMETH_EMREBOOT  EMMETH = 0 //重启
	EMMETH_EMRESTORE EMMETH = 1 //恢复出厂
	EMMETH_EMSETBOX  EMMETH = 2 //设置机箱号
	EMMETH_EMUPGRADE EMMETH = 3 //升级
)

// Enum value maps for EMMETH.
var (
	EMMETH_name = map[int32]string{
		0: "EMREBOOT",
		1: "EMRESTORE",
		2: "EMSETBOX",
		3: "EMUPGRADE",
	}
	EMMETH_value = map[string]int32{
		"EMREBOOT":  0,
		"EMRESTORE": 1,
		"EMSETBOX":  2,
		"EMUPGRADE": 3,
	}
)

func (x EMMETH) Enum() *EMMETH {
	p := new(EMMETH)
	*p = x
	return p
}

func (x EMMETH) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EMMETH) Descriptor() protoreflect.EnumDescriptor {
	return file_msp_cnt_proto_enumTypes[2].Descriptor()
}

func (EMMETH) Type() protoreflect.EnumType {
	return &file_msp_cnt_proto_enumTypes[2]
}

func (x EMMETH) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EMMETH.Descriptor instead.
func (EMMETH) EnumDescriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{2}
}

type ELICENCEST int32

const (
	ELICENCEST_ELICNONE     ELICENCEST = 0
	ELICENCEST_ELICNOT      ELICENCEST = 20093
	ELICENCEST_ELICEXP      ELICENCEST = 20094
	ELICENCEST_ELICTYPEERR  ELICENCEST = 20095
	ELICENCEST_ELICEHOSTERR ELICENCEST = 20096
	ELICENCEST_ELICEDATAERR ELICENCEST = 20097
)

// Enum value maps for ELICENCEST.
var (
	ELICENCEST_name = map[int32]string{
		0:     "ELICNONE",
		20093: "ELICNOT",
		20094: "ELICEXP",
		20095: "ELICTYPEERR",
		20096: "ELICEHOSTERR",
		20097: "ELICEDATAERR",
	}
	ELICENCEST_value = map[string]int32{
		"ELICNONE":     0,
		"ELICNOT":      20093,
		"ELICEXP":      20094,
		"ELICTYPEERR":  20095,
		"ELICEHOSTERR": 20096,
		"ELICEDATAERR": 20097,
	}
)

func (x ELICENCEST) Enum() *ELICENCEST {
	p := new(ELICENCEST)
	*p = x
	return p
}

func (x ELICENCEST) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ELICENCEST) Descriptor() protoreflect.EnumDescriptor {
	return file_msp_cnt_proto_enumTypes[3].Descriptor()
}

func (ELICENCEST) Type() protoreflect.EnumType {
	return &file_msp_cnt_proto_enumTypes[3]
}

func (x ELICENCEST) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ELICENCEST.Descriptor instead.
func (ELICENCEST) EnumDescriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{3}
}

type ELICENCEBIT int32

const (
	ELICENCEBIT_ELICBITKVM   ELICENCEBIT = 0
	ELICENCEBIT_ELICBITVIDEO ELICENCEBIT = 1
	ELICENCEBIT_ELICBITAUDIO ELICENCEBIT = 2
	ELICENCEBIT_ELICBITREST  ELICENCEBIT = 3
	ELICENCEBIT_ELICBITZK    ELICENCEBIT = 4
	ELICENCEBIT_ELICBITVS    ELICENCEBIT = 5
)

// Enum value maps for ELICENCEBIT.
var (
	ELICENCEBIT_name = map[int32]string{
		0: "ELICBITKVM",
		1: "ELICBITVIDEO",
		2: "ELICBITAUDIO",
		3: "ELICBITREST",
		4: "ELICBITZK",
		5: "ELICBITVS",
	}
	ELICENCEBIT_value = map[string]int32{
		"ELICBITKVM":   0,
		"ELICBITVIDEO": 1,
		"ELICBITAUDIO": 2,
		"ELICBITREST":  3,
		"ELICBITZK":    4,
		"ELICBITVS":    5,
	}
)

func (x ELICENCEBIT) Enum() *ELICENCEBIT {
	p := new(ELICENCEBIT)
	*p = x
	return p
}

func (x ELICENCEBIT) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ELICENCEBIT) Descriptor() protoreflect.EnumDescriptor {
	return file_msp_cnt_proto_enumTypes[4].Descriptor()
}

func (ELICENCEBIT) Type() protoreflect.EnumType {
	return &file_msp_cnt_proto_enumTypes[4]
}

func (x ELICENCEBIT) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ELICENCEBIT.Descriptor instead.
func (ELICENCEBIT) EnumDescriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{4}
}

type OPCODE int32

const (
	OPCODE_OPTOP    OPCODE = 0
	OPCODE_OPBOTTOM OPCODE = 1
	OPCODE_OPUP     OPCODE = 2
	OPCODE_OPDOWN   OPCODE = 3
	OPCODE_OPOPEN   OPCODE = 4
	OPCODE_OPCLOSE  OPCODE = 5
	OPCODE_OPCLEAN  OPCODE = 6
)

// Enum value maps for OPCODE.
var (
	OPCODE_name = map[int32]string{
		0: "OPTOP",
		1: "OPBOTTOM",
		2: "OPUP",
		3: "OPDOWN",
		4: "OPOPEN",
		5: "OPCLOSE",
		6: "OPCLEAN",
	}
	OPCODE_value = map[string]int32{
		"OPTOP":    0,
		"OPBOTTOM": 1,
		"OPUP":     2,
		"OPDOWN":   3,
		"OPOPEN":   4,
		"OPCLOSE":  5,
		"OPCLEAN":  6,
	}
)

func (x OPCODE) Enum() *OPCODE {
	p := new(OPCODE)
	*p = x
	return p
}

func (x OPCODE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OPCODE) Descriptor() protoreflect.EnumDescriptor {
	return file_msp_cnt_proto_enumTypes[5].Descriptor()
}

func (OPCODE) Type() protoreflect.EnumType {
	return &file_msp_cnt_proto_enumTypes[5]
}

func (x OPCODE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OPCODE.Descriptor instead.
func (OPCODE) EnumDescriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{5}
}

type PTZCODE int32

const (
	PTZCODE_CODENONE    PTZCODE = 0
	PTZCODE_ZOOMLARGER  PTZCODE = 11
	PTZCODE_ZOOMSMALL   PTZCODE = 12
	PTZCODE_FOCUSNEAR   PTZCODE = 13
	PTZCODE_FOCUSFAR    PTZCODE = 14
	PTZCODE_LIGHTLARGER PTZCODE = 15
	PTZCODE_LIGHTSMALL  PTZCODE = 16
	PTZCODE_MOVEUP      PTZCODE = 21
	PTZCODE_MOVEDOWN    PTZCODE = 22
	PTZCODE_MOVELEFT    PTZCODE = 23
	PTZCODE_MOVERIGHT   PTZCODE = 24
	PTZCODE_MOVELUP     PTZCODE = 25
	PTZCODE_MOVERUP     PTZCODE = 26
	PTZCODE_MOVELDOWN   PTZCODE = 27
	PTZCODE_MOVERDOWN   PTZCODE = 28
	PTZCODE_MOVEAUTO    PTZCODE = 29
	PTZCODE_GOTOPRESET  PTZCODE = 39
	PTZCODE_SETPRESET   PTZCODE = 40
)

// Enum value maps for PTZCODE.
var (
	PTZCODE_name = map[int32]string{
		0:  "CODENONE",
		11: "ZOOMLARGER",
		12: "ZOOMSMALL",
		13: "FOCUSNEAR",
		14: "FOCUSFAR",
		15: "LIGHTLARGER",
		16: "LIGHTSMALL",
		21: "MOVEUP",
		22: "MOVEDOWN",
		23: "MOVELEFT",
		24: "MOVERIGHT",
		25: "MOVELUP",
		26: "MOVERUP",
		27: "MOVELDOWN",
		28: "MOVERDOWN",
		29: "MOVEAUTO",
		39: "GOTOPRESET",
		40: "SETPRESET",
	}
	PTZCODE_value = map[string]int32{
		"CODENONE":    0,
		"ZOOMLARGER":  11,
		"ZOOMSMALL":   12,
		"FOCUSNEAR":   13,
		"FOCUSFAR":    14,
		"LIGHTLARGER": 15,
		"LIGHTSMALL":  16,
		"MOVEUP":      21,
		"MOVEDOWN":    22,
		"MOVELEFT":    23,
		"MOVERIGHT":   24,
		"MOVELUP":     25,
		"MOVERUP":     26,
		"MOVELDOWN":   27,
		"MOVERDOWN":   28,
		"MOVEAUTO":    29,
		"GOTOPRESET":  39,
		"SETPRESET":   40,
	}
)

func (x PTZCODE) Enum() *PTZCODE {
	p := new(PTZCODE)
	*p = x
	return p
}

func (x PTZCODE) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PTZCODE) Descriptor() protoreflect.EnumDescriptor {
	return file_msp_cnt_proto_enumTypes[6].Descriptor()
}

func (PTZCODE) Type() protoreflect.EnumType {
	return &file_msp_cnt_proto_enumTypes[6]
}

func (x PTZCODE) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PTZCODE.Descriptor instead.
func (PTZCODE) EnumDescriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{6}
}

type Msg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Head *Head      `protobuf:"bytes,1,opt,name=head,proto3" json:"head,omitempty"`
	Body *anypb.Any `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *Msg) Reset() {
	*x = Msg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Msg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Msg) ProtoMessage() {}

func (x *Msg) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Msg.ProtoReflect.Descriptor instead.
func (*Msg) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{0}
}

func (x *Msg) GetHead() *Head {
	if x != nil {
		return x.Head
	}
	return nil
}

func (x *Msg) GetBody() *anypb.Any {
	if x != nil {
		return x.Body
	}
	return nil
}

type Head struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uri     string `protobuf:"bytes,1,opt,name=uri,proto3" json:"uri,omitempty"`
	Token   string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	Err     string `protobuf:"bytes,3,opt,name=err,proto3" json:"err,omitempty"`
	Len     uint32 `protobuf:"fixed32,4,opt,name=len,proto3" json:"len,omitempty"`
	Serial  uint32 `protobuf:"fixed32,5,opt,name=serial,proto3" json:"serial,omitempty"`
	Context uint64 `protobuf:"fixed64,6,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *Head) Reset() {
	*x = Head{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Head) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Head) ProtoMessage() {}

func (x *Head) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Head.ProtoReflect.Descriptor instead.
func (*Head) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{1}
}

func (x *Head) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *Head) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Head) GetErr() string {
	if x != nil {
		return x.Err
	}
	return ""
}

func (x *Head) GetLen() uint32 {
	if x != nil {
		return x.Len
	}
	return 0
}

func (x *Head) GetSerial() uint32 {
	if x != nil {
		return x.Serial
	}
	return 0
}

func (x *Head) GetContext() uint64 {
	if x != nil {
		return x.Context
	}
	return 0
}

type String struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *String) Reset() {
	*x = String{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *String) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*String) ProtoMessage() {}

func (x *String) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use String.ProtoReflect.Descriptor instead.
func (*String) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{2}
}

func (x *String) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Query struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sn     string `protobuf:"bytes,1,opt,name=sn,proto3" json:"sn,omitempty"`           //所属平台标识
	Id     uint32 `protobuf:"fixed32,2,opt,name=id,proto3" json:"id,omitempty"`         //所属位置标识
	Subid  uint32 `protobuf:"fixed32,3,opt,name=subid,proto3" json:"subid,omitempty"`   //所属子位置标识
	Offset uint32 `protobuf:"fixed32,4,opt,name=offset,proto3" json:"offset,omitempty"` //起始位置
	Size   uint32 `protobuf:"fixed32,5,opt,name=size,proto3" json:"size,omitempty"`     //查询个数，0: 查询所有
	Exid   uint32 `protobuf:"fixed32,6,opt,name=exid,proto3" json:"exid,omitempty"`
}

func (x *Query) Reset() {
	*x = Query{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Query) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Query) ProtoMessage() {}

func (x *Query) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Query.ProtoReflect.Descriptor instead.
func (*Query) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{3}
}

func (x *Query) GetSn() string {
	if x != nil {
		return x.Sn
	}
	return ""
}

func (x *Query) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Query) GetSubid() uint32 {
	if x != nil {
		return x.Subid
	}
	return 0
}

func (x *Query) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *Query) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Query) GetExid() uint32 {
	if x != nil {
		return x.Exid
	}
	return 0
}

type ValueU32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value uint32 `protobuf:"fixed32,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ValueU32) Reset() {
	*x = ValueU32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueU32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueU32) ProtoMessage() {}

func (x *ValueU32) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueU32.ProtoReflect.Descriptor instead.
func (*ValueU32) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{4}
}

func (x *ValueU32) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type TransCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type uint32 `protobuf:"fixed32,2,opt,name=type,proto3" json:"type,omitempty"`
	Size uint32 `protobuf:"fixed32,3,opt,name=size,proto3" json:"size,omitempty"`
	Opt  uint32 `protobuf:"fixed32,4,opt,name=opt,proto3" json:"opt,omitempty"`
}

func (x *TransCfg) Reset() {
	*x = TransCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransCfg) ProtoMessage() {}

func (x *TransCfg) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransCfg.ProtoReflect.Descriptor instead.
func (*TransCfg) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{5}
}

func (x *TransCfg) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TransCfg) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *TransCfg) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *TransCfg) GetOpt() uint32 {
	if x != nil {
		return x.Opt
	}
	return 0
}

type Notify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	State uint32 `protobuf:"fixed32,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *Notify) Reset() {
	*x = Notify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Notify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notify) ProtoMessage() {}

func (x *Notify) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notify.ProtoReflect.Descriptor instead.
func (*Notify) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{6}
}

func (x *Notify) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *Notify) GetState() uint32 {
	if x != nil {
		return x.State
	}
	return 0
}

type GroupMem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      uint32 `protobuf:"fixed32,1,opt,name=id,proto3" json:"id,omitempty"`
	Nextid  uint32 `protobuf:"fixed32,2,opt,name=nextid,proto3" json:"nextid,omitempty"`
	Name    string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Groupid uint32 `protobuf:"fixed32,4,opt,name=groupid,proto3" json:"groupid,omitempty"`
	Online  uint32 `protobuf:"fixed32,5,opt,name=online,proto3" json:"online,omitempty"`
}

func (x *GroupMem) Reset() {
	*x = GroupMem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupMem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupMem) ProtoMessage() {}

func (x *GroupMem) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupMem.ProtoReflect.Descriptor instead.
func (*GroupMem) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{7}
}

func (x *GroupMem) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GroupMem) GetNextid() uint32 {
	if x != nil {
		return x.Nextid
	}
	return 0
}

func (x *GroupMem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GroupMem) GetGroupid() uint32 {
	if x != nil {
		return x.Groupid
	}
	return 0
}

func (x *GroupMem) GetOnline() uint32 {
	if x != nil {
		return x.Online
	}
	return 0
}

type NetCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   uint32 `protobuf:"fixed32,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Use  bool   `protobuf:"varint,3,opt,name=use,proto3" json:"use,omitempty"`
	Dhcp bool   `protobuf:"varint,4,opt,name=dhcp,proto3" json:"dhcp,omitempty"`
	Ip   string `protobuf:"bytes,5,opt,name=ip,proto3" json:"ip,omitempty"`
	Type uint32 `protobuf:"fixed32,6,opt,name=type,proto3" json:"type,omitempty"`
	Mask string `protobuf:"bytes,7,opt,name=mask,proto3" json:"mask,omitempty"`
}

func (x *NetCfg) Reset() {
	*x = NetCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetCfg) ProtoMessage() {}

func (x *NetCfg) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetCfg.ProtoReflect.Descriptor instead.
func (*NetCfg) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{8}
}

func (x *NetCfg) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NetCfg) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NetCfg) GetUse() bool {
	if x != nil {
		return x.Use
	}
	return false
}

func (x *NetCfg) GetDhcp() bool {
	if x != nil {
		return x.Dhcp
	}
	return false
}

func (x *NetCfg) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *NetCfg) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *NetCfg) GetMask() string {
	if x != nil {
		return x.Mask
	}
	return ""
}

type NetCfgList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Net []*NetCfg `protobuf:"bytes,1,rep,name=net,proto3" json:"net,omitempty"`
}

func (x *NetCfgList) Reset() {
	*x = NetCfgList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetCfgList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetCfgList) ProtoMessage() {}

func (x *NetCfgList) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetCfgList.ProtoReflect.Descriptor instead.
func (*NetCfgList) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{9}
}

func (x *NetCfgList) GetNet() []*NetCfg {
	if x != nil {
		return x.Net
	}
	return nil
}

type Lancfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ipin  string `protobuf:"bytes,1,opt,name=ipin,proto3" json:"ipin,omitempty"`
	Ipout string `protobuf:"bytes,2,opt,name=ipout,proto3" json:"ipout,omitempty"`
}

func (x *Lancfg) Reset() {
	*x = Lancfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lancfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lancfg) ProtoMessage() {}

func (x *Lancfg) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lancfg.ProtoReflect.Descriptor instead.
func (*Lancfg) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{10}
}

func (x *Lancfg) GetIpin() string {
	if x != nil {
		return x.Ipin
	}
	return ""
}

func (x *Lancfg) GetIpout() string {
	if x != nil {
		return x.Ipout
	}
	return ""
}

type Umt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint32 `protobuf:"fixed32,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type     uint32 `protobuf:"fixed32,3,opt,name=type,proto3" json:"type,omitempty"`
	Ip       string `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`
	Port     uint32 `protobuf:"fixed32,5,opt,name=port,proto3" json:"port,omitempty"`
	User     string `protobuf:"bytes,6,opt,name=user,proto3" json:"user,omitempty"`
	Pass     string `protobuf:"bytes,7,opt,name=pass,proto3" json:"pass,omitempty"`
	Online   bool   `protobuf:"varint,8,opt,name=online,proto3" json:"online,omitempty"`
	Rtsp     string `protobuf:"bytes,9,opt,name=rtsp,proto3" json:"rtsp,omitempty"`
	Ipcmedia uint32 `protobuf:"fixed32,10,opt,name=ipcmedia,proto3" json:"ipcmedia,omitempty"`
	Mtmedia  uint32 `protobuf:"fixed32,11,opt,name=mtmedia,proto3" json:"mtmedia,omitempty"`
	Conf     uint32 `protobuf:"fixed32,12,opt,name=conf,proto3" json:"conf,omitempty"`
	Device   uint32 `protobuf:"fixed32,13,opt,name=device,proto3" json:"device,omitempty"`
}

func (x *Umt) Reset() {
	*x = Umt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Umt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Umt) ProtoMessage() {}

func (x *Umt) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Umt.ProtoReflect.Descriptor instead.
func (*Umt) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{11}
}

func (x *Umt) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Umt) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Umt) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *Umt) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Umt) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Umt) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *Umt) GetPass() string {
	if x != nil {
		return x.Pass
	}
	return ""
}

func (x *Umt) GetOnline() bool {
	if x != nil {
		return x.Online
	}
	return false
}

func (x *Umt) GetRtsp() string {
	if x != nil {
		return x.Rtsp
	}
	return ""
}

func (x *Umt) GetIpcmedia() uint32 {
	if x != nil {
		return x.Ipcmedia
	}
	return 0
}

func (x *Umt) GetMtmedia() uint32 {
	if x != nil {
		return x.Mtmedia
	}
	return 0
}

func (x *Umt) GetConf() uint32 {
	if x != nil {
		return x.Conf
	}
	return 0
}

func (x *Umt) GetDevice() uint32 {
	if x != nil {
		return x.Device
	}
	return 0
}

type UmtList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Umt []*Umt `protobuf:"bytes,1,rep,name=umt,proto3" json:"umt,omitempty"`
}

func (x *UmtList) Reset() {
	*x = UmtList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UmtList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UmtList) ProtoMessage() {}

func (x *UmtList) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UmtList.ProtoReflect.Descriptor instead.
func (*UmtList) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{12}
}

func (x *UmtList) GetUmt() []*Umt {
	if x != nil {
		return x.Umt
	}
	return nil
}

type UmtState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    uint32 `protobuf:"fixed32,1,opt,name=id,proto3" json:"id,omitempty"`       //UMT ID或点位ID
	State uint32 `protobuf:"fixed32,2,opt,name=state,proto3" json:"state,omitempty"` //设备状态，参见EMUMTOPT_TYPE
}

func (x *UmtState) Reset() {
	*x = UmtState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UmtState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UmtState) ProtoMessage() {}

func (x *UmtState) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UmtState.ProtoReflect.Descriptor instead.
func (*UmtState) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{13}
}

func (x *UmtState) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UmtState) GetState() uint32 {
	if x != nil {
		return x.State
	}
	return 0
}

type UmtDec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   uint32 `protobuf:"fixed32,1,opt,name=id,proto3" json:"id,omitempty"`
	Box  uint32 `protobuf:"fixed32,2,opt,name=box,proto3" json:"box,omitempty"`   //机箱号
	Slot uint32 `protobuf:"fixed32,3,opt,name=slot,proto3" json:"slot,omitempty"` //槽位号
	Mode uint32 `protobuf:"fixed32,4,opt,name=mode,proto3" json:"mode,omitempty"` //拉流模式
}

func (x *UmtDec) Reset() {
	*x = UmtDec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UmtDec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UmtDec) ProtoMessage() {}

func (x *UmtDec) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UmtDec.ProtoReflect.Descriptor instead.
func (*UmtDec) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{14}
}

func (x *UmtDec) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UmtDec) GetBox() uint32 {
	if x != nil {
		return x.Box
	}
	return 0
}

func (x *UmtDec) GetSlot() uint32 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *UmtDec) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

type UmtDecList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Umtdec []*UmtDec `protobuf:"bytes,1,rep,name=umtdec,proto3" json:"umtdec,omitempty"`
}

func (x *UmtDecList) Reset() {
	*x = UmtDecList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UmtDecList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UmtDecList) ProtoMessage() {}

func (x *UmtDecList) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UmtDecList.ProtoReflect.Descriptor instead.
func (*UmtDecList) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{15}
}

func (x *UmtDecList) GetUmtdec() []*UmtDec {
	if x != nil {
		return x.Umtdec
	}
	return nil
}

type UmtStateList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State []*UmtState `protobuf:"bytes,1,rep,name=state,proto3" json:"state,omitempty"`
}

func (x *UmtStateList) Reset() {
	*x = UmtStateList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UmtStateList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UmtStateList) ProtoMessage() {}

func (x *UmtStateList) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UmtStateList.ProtoReflect.Descriptor instead.
func (*UmtStateList) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{16}
}

func (x *UmtStateList) GetState() []*UmtState {
	if x != nil {
		return x.State
	}
	return nil
}

type DecMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Box  uint32 `protobuf:"fixed32,1,opt,name=box,proto3" json:"box,omitempty"`
	Slot uint32 `protobuf:"fixed32,2,opt,name=slot,proto3" json:"slot,omitempty"`
	Mode uint32 `protobuf:"fixed32,3,opt,name=mode,proto3" json:"mode,omitempty"`
}

func (x *DecMode) Reset() {
	*x = DecMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecMode) ProtoMessage() {}

func (x *DecMode) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecMode.ProtoReflect.Descriptor instead.
func (*DecMode) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{17}
}

func (x *DecMode) GetBox() uint32 {
	if x != nil {
		return x.Box
	}
	return 0
}

func (x *DecMode) GetSlot() uint32 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *DecMode) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

type DecModeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode []*DecMode `protobuf:"bytes,1,rep,name=mode,proto3" json:"mode,omitempty"`
}

func (x *DecModeList) Reset() {
	*x = DecModeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DecModeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DecModeList) ProtoMessage() {}

func (x *DecModeList) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DecModeList.ProtoReflect.Descriptor instead.
func (*DecModeList) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{18}
}

func (x *DecModeList) GetMode() []*DecMode {
	if x != nil {
		return x.Mode
	}
	return nil
}

type RdBox struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip   string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port uint32 `protobuf:"fixed32,2,opt,name=port,proto3" json:"port,omitempty"`
	Main bool   `protobuf:"varint,3,opt,name=main,proto3" json:"main,omitempty"`
}

func (x *RdBox) Reset() {
	*x = RdBox{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RdBox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RdBox) ProtoMessage() {}

func (x *RdBox) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RdBox.ProtoReflect.Descriptor instead.
func (*RdBox) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{19}
}

func (x *RdBox) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *RdBox) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *RdBox) GetMain() bool {
	if x != nil {
		return x.Main
	}
	return false
}

type RdBoxList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rdbox []*RdBox `protobuf:"bytes,1,rep,name=rdbox,proto3" json:"rdbox,omitempty"`
}

func (x *RdBoxList) Reset() {
	*x = RdBoxList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RdBoxList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RdBoxList) ProtoMessage() {}

func (x *RdBoxList) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RdBoxList.ProtoReflect.Descriptor instead.
func (*RdBoxList) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{20}
}

func (x *RdBoxList) GetRdbox() []*RdBox {
	if x != nil {
		return x.Rdbox
	}
	return nil
}

type RdPort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint32 `protobuf:"fixed32,1,opt,name=id,proto3" json:"id,omitempty"`
	Lbox     uint32 `protobuf:"fixed32,2,opt,name=lbox,proto3" json:"lbox,omitempty"`
	Type     uint32 `protobuf:"fixed32,3,opt,name=type,proto3" json:"type,omitempty"`
	Lslot    uint32 `protobuf:"fixed32,4,opt,name=lslot,proto3" json:"lslot,omitempty"`
	Lport    uint32 `protobuf:"fixed32,5,opt,name=lport,proto3" json:"lport,omitempty"`
	Lstate   uint32 `protobuf:"fixed32,6,opt,name=lstate,proto3" json:"lstate,omitempty"`
	Fslot    uint32 `protobuf:"fixed32,7,opt,name=fslot,proto3" json:"fslot,omitempty"`
	Fport    uint32 `protobuf:"fixed32,8,opt,name=fport,proto3" json:"fport,omitempty"`
	Fstate   uint32 `protobuf:"fixed32,9,opt,name=fstate,proto3" json:"fstate,omitempty"`
	Module   uint32 `protobuf:"fixed32,10,opt,name=module,proto3" json:"module,omitempty"`
	Fit      bool   `protobuf:"varint,11,opt,name=fit,proto3" json:"fit,omitempty"`
	Phybox   uint32 `protobuf:"fixed32,12,opt,name=phybox,proto3" json:"phybox,omitempty"`
	Phytype  uint32 `protobuf:"fixed32,13,opt,name=phytype,proto3" json:"phytype,omitempty"`
	Physlot  uint32 `protobuf:"fixed32,14,opt,name=physlot,proto3" json:"physlot,omitempty"`
	Phyport  uint32 `protobuf:"fixed32,15,opt,name=phyport,proto3" json:"phyport,omitempty"`
	Phystate uint32 `protobuf:"fixed32,16,opt,name=phystate,proto3" json:"phystate,omitempty"`
}

func (x *RdPort) Reset() {
	*x = RdPort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RdPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RdPort) ProtoMessage() {}

func (x *RdPort) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RdPort.ProtoReflect.Descriptor instead.
func (*RdPort) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{21}
}

func (x *RdPort) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RdPort) GetLbox() uint32 {
	if x != nil {
		return x.Lbox
	}
	return 0
}

func (x *RdPort) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *RdPort) GetLslot() uint32 {
	if x != nil {
		return x.Lslot
	}
	return 0
}

func (x *RdPort) GetLport() uint32 {
	if x != nil {
		return x.Lport
	}
	return 0
}

func (x *RdPort) GetLstate() uint32 {
	if x != nil {
		return x.Lstate
	}
	return 0
}

func (x *RdPort) GetFslot() uint32 {
	if x != nil {
		return x.Fslot
	}
	return 0
}

func (x *RdPort) GetFport() uint32 {
	if x != nil {
		return x.Fport
	}
	return 0
}

func (x *RdPort) GetFstate() uint32 {
	if x != nil {
		return x.Fstate
	}
	return 0
}

func (x *RdPort) GetModule() uint32 {
	if x != nil {
		return x.Module
	}
	return 0
}

func (x *RdPort) GetFit() bool {
	if x != nil {
		return x.Fit
	}
	return false
}

func (x *RdPort) GetPhybox() uint32 {
	if x != nil {
		return x.Phybox
	}
	return 0
}

func (x *RdPort) GetPhytype() uint32 {
	if x != nil {
		return x.Phytype
	}
	return 0
}

func (x *RdPort) GetPhyslot() uint32 {
	if x != nil {
		return x.Physlot
	}
	return 0
}

func (x *RdPort) GetPhyport() uint32 {
	if x != nil {
		return x.Phyport
	}
	return 0
}

func (x *RdPort) GetPhystate() uint32 {
	if x != nil {
		return x.Phystate
	}
	return 0
}

type RdPortList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rdport []*RdPort `protobuf:"bytes,1,rep,name=rdport,proto3" json:"rdport,omitempty"`
}

func (x *RdPortList) Reset() {
	*x = RdPortList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RdPortList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RdPortList) ProtoMessage() {}

func (x *RdPortList) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RdPortList.ProtoReflect.Descriptor instead.
func (*RdPortList) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{22}
}

func (x *RdPortList) GetRdport() []*RdPort {
	if x != nil {
		return x.Rdport
	}
	return nil
}

type RdOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sid    uint32 `protobuf:"fixed32,1,opt,name=sid,proto3" json:"sid,omitempty"`
	Did    uint32 `protobuf:"fixed32,2,opt,name=did,proto3" json:"did,omitempty"`
	On     bool   `protobuf:"varint,3,opt,name=on,proto3" json:"on,omitempty"`
	Result string `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *RdOutput) Reset() {
	*x = RdOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RdOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RdOutput) ProtoMessage() {}

func (x *RdOutput) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RdOutput.ProtoReflect.Descriptor instead.
func (*RdOutput) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{23}
}

func (x *RdOutput) GetSid() uint32 {
	if x != nil {
		return x.Sid
	}
	return 0
}

func (x *RdOutput) GetDid() uint32 {
	if x != nil {
		return x.Did
	}
	return 0
}

func (x *RdOutput) GetOn() bool {
	if x != nil {
		return x.On
	}
	return false
}

func (x *RdOutput) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

type RdOutputList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rdout []*RdOutput `protobuf:"bytes,1,rep,name=rdout,proto3" json:"rdout,omitempty"`
}

func (x *RdOutputList) Reset() {
	*x = RdOutputList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RdOutputList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RdOutputList) ProtoMessage() {}

func (x *RdOutputList) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RdOutputList.ProtoReflect.Descriptor instead.
func (*RdOutputList) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{24}
}

func (x *RdOutputList) GetRdout() []*RdOutput {
	if x != nil {
		return x.Rdout
	}
	return nil
}

type BoxExt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inid  string `protobuf:"bytes,1,opt,name=inid,proto3" json:"inid,omitempty"`
	Outid string `protobuf:"bytes,2,opt,name=outid,proto3" json:"outid,omitempty"`
}

func (x *BoxExt) Reset() {
	*x = BoxExt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoxExt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoxExt) ProtoMessage() {}

func (x *BoxExt) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoxExt.ProtoReflect.Descriptor instead.
func (*BoxExt) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{25}
}

func (x *BoxExt) GetInid() string {
	if x != nil {
		return x.Inid
	}
	return ""
}

func (x *BoxExt) GetOutid() string {
	if x != nil {
		return x.Outid
	}
	return ""
}

type BoxExtList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Box  []*BoxExt `protobuf:"bytes,1,rep,name=box,proto3" json:"box,omitempty"`
	Type string    `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *BoxExtList) Reset() {
	*x = BoxExtList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoxExtList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoxExtList) ProtoMessage() {}

func (x *BoxExtList) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoxExtList.ProtoReflect.Descriptor instead.
func (*BoxExtList) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{26}
}

func (x *BoxExtList) GetBox() []*BoxExt {
	if x != nil {
		return x.Box
	}
	return nil
}

func (x *BoxExtList) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type RdPortUpdate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    string  `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Context *RdPort `protobuf:"bytes,2,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *RdPortUpdate) Reset() {
	*x = RdPortUpdate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RdPortUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RdPortUpdate) ProtoMessage() {}

func (x *RdPortUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RdPortUpdate.ProtoReflect.Descriptor instead.
func (*RdPortUpdate) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{27}
}

func (x *RdPortUpdate) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RdPortUpdate) GetContext() *RdPort {
	if x != nil {
		return x.Context
	}
	return nil
}

type PrePlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint32      `protobuf:"fixed32,1,opt,name=id,proto3" json:"id,omitempty"`
	Name   string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Enable uint32      `protobuf:"fixed32,3,opt,name=enable,proto3" json:"enable,omitempty"`
	Chn    []*GroupMem `protobuf:"bytes,4,rep,name=chn,proto3" json:"chn,omitempty"`
	Action uint32      `protobuf:"fixed32,5,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *PrePlan) Reset() {
	*x = PrePlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrePlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrePlan) ProtoMessage() {}

func (x *PrePlan) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrePlan.ProtoReflect.Descriptor instead.
func (*PrePlan) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{28}
}

func (x *PrePlan) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PrePlan) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PrePlan) GetEnable() uint32 {
	if x != nil {
		return x.Enable
	}
	return 0
}

func (x *PrePlan) GetChn() []*GroupMem {
	if x != nil {
		return x.Chn
	}
	return nil
}

func (x *PrePlan) GetAction() uint32 {
	if x != nil {
		return x.Action
	}
	return 0
}

type PrePlans struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Plan []*PrePlan `protobuf:"bytes,1,rep,name=plan,proto3" json:"plan,omitempty"`
}

func (x *PrePlans) Reset() {
	*x = PrePlans{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrePlans) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrePlans) ProtoMessage() {}

func (x *PrePlans) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrePlans.ProtoReflect.Descriptor instead.
func (*PrePlans) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{29}
}

func (x *PrePlans) GetPlan() []*PrePlan {
	if x != nil {
		return x.Plan
	}
	return nil
}

type GroupMems struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chn []*GroupMem `protobuf:"bytes,1,rep,name=chn,proto3" json:"chn,omitempty"`
}

func (x *GroupMems) Reset() {
	*x = GroupMems{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupMems) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupMems) ProtoMessage() {}

func (x *GroupMems) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupMems.ProtoReflect.Descriptor instead.
func (*GroupMems) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{30}
}

func (x *GroupMems) GetChn() []*GroupMem {
	if x != nil {
		return x.Chn
	}
	return nil
}

type Ids struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id []uint32 `protobuf:"fixed32,1,rep,packed,name=id,proto3" json:"id,omitempty"`
}

func (x *Ids) Reset() {
	*x = Ids{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ids) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ids) ProtoMessage() {}

func (x *Ids) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ids.ProtoReflect.Descriptor instead.
func (*Ids) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{31}
}

func (x *Ids) GetId() []uint32 {
	if x != nil {
		return x.Id
	}
	return nil
}

type QueryChn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    uint32 `protobuf:"fixed32,1,opt,name=id,proto3" json:"id,omitempty"`
	No    string `protobuf:"bytes,2,opt,name=no,proto3" json:"no,omitempty"`
	Alias string `protobuf:"bytes,3,opt,name=alias,proto3" json:"alias,omitempty"`
	Type  uint32 `protobuf:"fixed32,4,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *QueryChn) Reset() {
	*x = QueryChn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryChn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryChn) ProtoMessage() {}

func (x *QueryChn) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryChn.ProtoReflect.Descriptor instead.
func (*QueryChn) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{32}
}

func (x *QueryChn) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *QueryChn) GetNo() string {
	if x != nil {
		return x.No
	}
	return ""
}

func (x *QueryChn) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *QueryChn) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type QueryChnList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chn []*QueryChn `protobuf:"bytes,1,rep,name=chn,proto3" json:"chn,omitempty"`
}

func (x *QueryChnList) Reset() {
	*x = QueryChnList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryChnList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryChnList) ProtoMessage() {}

func (x *QueryChnList) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryChnList.ProtoReflect.Descriptor instead.
func (*QueryChnList) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{33}
}

func (x *QueryChnList) GetChn() []*QueryChn {
	if x != nil {
		return x.Chn
	}
	return nil
}

type ChnBasic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id        uint32 `protobuf:"fixed32,2,opt,name=id,proto3" json:"id,omitempty"`
	Chntype   uint32 `protobuf:"fixed32,3,opt,name=chntype,proto3" json:"chntype,omitempty"`
	Porttype  uint32 `protobuf:"fixed32,4,opt,name=porttype,proto3" json:"porttype,omitempty"`
	Online    bool   `protobuf:"varint,5,opt,name=online,proto3" json:"online,omitempty"`
	Line      bool   `protobuf:"varint,6,opt,name=line,proto3" json:"line,omitempty"`
	Signal    bool   `protobuf:"varint,7,opt,name=signal,proto3" json:"signal,omitempty"`
	Hid       string `protobuf:"bytes,8,opt,name=hid,proto3" json:"hid,omitempty"`
	Audiotype uint32 `protobuf:"fixed32,9,opt,name=audiotype,proto3" json:"audiotype,omitempty"`
}

func (x *ChnBasic) Reset() {
	*x = ChnBasic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChnBasic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChnBasic) ProtoMessage() {}

func (x *ChnBasic) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChnBasic.ProtoReflect.Descriptor instead.
func (*ChnBasic) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{34}
}

func (x *ChnBasic) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChnBasic) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ChnBasic) GetChntype() uint32 {
	if x != nil {
		return x.Chntype
	}
	return 0
}

func (x *ChnBasic) GetPorttype() uint32 {
	if x != nil {
		return x.Porttype
	}
	return 0
}

func (x *ChnBasic) GetOnline() bool {
	if x != nil {
		return x.Online
	}
	return false
}

func (x *ChnBasic) GetLine() bool {
	if x != nil {
		return x.Line
	}
	return false
}

func (x *ChnBasic) GetSignal() bool {
	if x != nil {
		return x.Signal
	}
	return false
}

func (x *ChnBasic) GetHid() string {
	if x != nil {
		return x.Hid
	}
	return ""
}

func (x *ChnBasic) GetAudiotype() uint32 {
	if x != nil {
		return x.Audiotype
	}
	return 0
}

type ChnInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base      *ChnBasic `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Resw      uint32    `protobuf:"fixed32,2,opt,name=resw,proto3" json:"resw,omitempty"`
	Resh      uint32    `protobuf:"fixed32,3,opt,name=resh,proto3" json:"resh,omitempty"`
	Streamnum uint32    `protobuf:"fixed32,4,opt,name=streamnum,proto3" json:"streamnum,omitempty"`
	Avsync    bool      `protobuf:"varint,5,opt,name=avsync,proto3" json:"avsync,omitempty"`
	Aid       uint32    `protobuf:"fixed32,6,opt,name=aid,proto3" json:"aid,omitempty"`
	Anum      uint32    `protobuf:"fixed32,7,opt,name=anum,proto3" json:"anum,omitempty"`
	Astate    uint32    `protobuf:"fixed32,8,opt,name=astate,proto3" json:"astate,omitempty"`
	Ause      bool      `protobuf:"varint,9,opt,name=ause,proto3" json:"ause,omitempty"`
}

func (x *ChnInfo) Reset() {
	*x = ChnInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChnInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChnInfo) ProtoMessage() {}

func (x *ChnInfo) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChnInfo.ProtoReflect.Descriptor instead.
func (*ChnInfo) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{35}
}

func (x *ChnInfo) GetBase() *ChnBasic {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *ChnInfo) GetResw() uint32 {
	if x != nil {
		return x.Resw
	}
	return 0
}

func (x *ChnInfo) GetResh() uint32 {
	if x != nil {
		return x.Resh
	}
	return 0
}

func (x *ChnInfo) GetStreamnum() uint32 {
	if x != nil {
		return x.Streamnum
	}
	return 0
}

func (x *ChnInfo) GetAvsync() bool {
	if x != nil {
		return x.Avsync
	}
	return false
}

func (x *ChnInfo) GetAid() uint32 {
	if x != nil {
		return x.Aid
	}
	return 0
}

func (x *ChnInfo) GetAnum() uint32 {
	if x != nil {
		return x.Anum
	}
	return 0
}

func (x *ChnInfo) GetAstate() uint32 {
	if x != nil {
		return x.Astate
	}
	return 0
}

func (x *ChnInfo) GetAuse() bool {
	if x != nil {
		return x.Ause
	}
	return false
}

type ChnInfoList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chn []*ChnInfo `protobuf:"bytes,1,rep,name=chn,proto3" json:"chn,omitempty"`
}

func (x *ChnInfoList) Reset() {
	*x = ChnInfoList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChnInfoList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChnInfoList) ProtoMessage() {}

func (x *ChnInfoList) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChnInfoList.ProtoReflect.Descriptor instead.
func (*ChnInfoList) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{36}
}

func (x *ChnInfoList) GetChn() []*ChnInfo {
	if x != nil {
		return x.Chn
	}
	return nil
}

type ChnGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id       uint32 `protobuf:"fixed32,2,opt,name=id,proto3" json:"id,omitempty"`
	Nextid   uint32 `protobuf:"fixed32,3,opt,name=nextid,proto3" json:"nextid,omitempty"`
	Parentid uint32 `protobuf:"fixed32,4,opt,name=parentid,proto3" json:"parentid,omitempty"`
}

func (x *ChnGroup) Reset() {
	*x = ChnGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChnGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChnGroup) ProtoMessage() {}

func (x *ChnGroup) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChnGroup.ProtoReflect.Descriptor instead.
func (*ChnGroup) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{37}
}

func (x *ChnGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ChnGroup) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ChnGroup) GetNextid() uint32 {
	if x != nil {
		return x.Nextid
	}
	return 0
}

func (x *ChnGroup) GetParentid() uint32 {
	if x != nil {
		return x.Parentid
	}
	return 0
}

type ChnGroupState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group *ChnGroup `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	State uint32    `protobuf:"fixed32,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *ChnGroupState) Reset() {
	*x = ChnGroupState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChnGroupState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChnGroupState) ProtoMessage() {}

func (x *ChnGroupState) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChnGroupState.ProtoReflect.Descriptor instead.
func (*ChnGroupState) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{38}
}

func (x *ChnGroupState) GetGroup() *ChnGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *ChnGroupState) GetState() uint32 {
	if x != nil {
		return x.State
	}
	return 0
}

type ChnGroupList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chngroup []*ChnGroup `protobuf:"bytes,1,rep,name=chngroup,proto3" json:"chngroup,omitempty"`
}

func (x *ChnGroupList) Reset() {
	*x = ChnGroupList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChnGroupList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChnGroupList) ProtoMessage() {}

func (x *ChnGroupList) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChnGroupList.ProtoReflect.Descriptor instead.
func (*ChnGroupList) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{39}
}

func (x *ChnGroupList) GetChngroup() []*ChnGroup {
	if x != nil {
		return x.Chngroup
	}
	return nil
}

type GroupMemList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint32      `protobuf:"fixed32,1,opt,name=id,proto3" json:"id,omitempty"`
	State    uint32      `protobuf:"fixed32,2,opt,name=state,proto3" json:"state,omitempty"`
	Groupmen []*GroupMem `protobuf:"bytes,3,rep,name=groupmen,proto3" json:"groupmen,omitempty"`
}

func (x *GroupMemList) Reset() {
	*x = GroupMemList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupMemList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupMemList) ProtoMessage() {}

func (x *GroupMemList) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupMemList.ProtoReflect.Descriptor instead.
func (*GroupMemList) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{40}
}

func (x *GroupMemList) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GroupMemList) GetState() uint32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *GroupMemList) GetGroupmen() []*GroupMem {
	if x != nil {
		return x.Groupmen
	}
	return nil
}

type ChnNetEnalbe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint32 `protobuf:"fixed32,1,opt,name=id,proto3" json:"id,omitempty"`
	Enable bool   `protobuf:"varint,2,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *ChnNetEnalbe) Reset() {
	*x = ChnNetEnalbe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChnNetEnalbe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChnNetEnalbe) ProtoMessage() {}

func (x *ChnNetEnalbe) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChnNetEnalbe.ProtoReflect.Descriptor instead.
func (*ChnNetEnalbe) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{41}
}

func (x *ChnNetEnalbe) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ChnNetEnalbe) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type ChnNetEnalbeList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chnnetnable []*ChnNetEnalbe `protobuf:"bytes,1,rep,name=chnnetnable,proto3" json:"chnnetnable,omitempty"`
}

func (x *ChnNetEnalbeList) Reset() {
	*x = ChnNetEnalbeList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChnNetEnalbeList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChnNetEnalbeList) ProtoMessage() {}

func (x *ChnNetEnalbeList) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChnNetEnalbeList.ProtoReflect.Descriptor instead.
func (*ChnNetEnalbeList) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{42}
}

func (x *ChnNetEnalbeList) GetChnnetnable() []*ChnNetEnalbe {
	if x != nil {
		return x.Chnnetnable
	}
	return nil
}

type ChnMode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint32 `protobuf:"fixed32,1,opt,name=id,proto3" json:"id,omitempty"`
	Module uint32 `protobuf:"fixed32,2,opt,name=module,proto3" json:"module,omitempty"`
	Hdmi   uint32 `protobuf:"fixed32,3,opt,name=hdmi,proto3" json:"hdmi,omitempty"`
	Line   uint32 `protobuf:"fixed32,4,opt,name=line,proto3" json:"line,omitempty"`
}

func (x *ChnMode) Reset() {
	*x = ChnMode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChnMode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChnMode) ProtoMessage() {}

func (x *ChnMode) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChnMode.ProtoReflect.Descriptor instead.
func (*ChnMode) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{43}
}

func (x *ChnMode) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ChnMode) GetModule() uint32 {
	if x != nil {
		return x.Module
	}
	return 0
}

func (x *ChnMode) GetHdmi() uint32 {
	if x != nil {
		return x.Hdmi
	}
	return 0
}

func (x *ChnMode) GetLine() uint32 {
	if x != nil {
		return x.Line
	}
	return 0
}

type ChnEdid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   uint32 `protobuf:"fixed32,1,opt,name=id,proto3" json:"id,omitempty"`
	Edid string `protobuf:"bytes,2,opt,name=edid,proto3" json:"edid,omitempty"`
}

func (x *ChnEdid) Reset() {
	*x = ChnEdid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChnEdid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChnEdid) ProtoMessage() {}

func (x *ChnEdid) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChnEdid.ProtoReflect.Descriptor instead.
func (*ChnEdid) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{44}
}

func (x *ChnEdid) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ChnEdid) GetEdid() string {
	if x != nil {
		return x.Edid
	}
	return ""
}

type Edid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint32 `protobuf:"fixed32,1,opt,name=id,proto3" json:"id,omitempty"`
	Width  uint32 `protobuf:"fixed32,2,opt,name=width,proto3" json:"width,omitempty"`
	Height uint32 `protobuf:"fixed32,3,opt,name=height,proto3" json:"height,omitempty"`
	Module string `protobuf:"bytes,4,opt,name=module,proto3" json:"module,omitempty"`
	Cfg    string `protobuf:"bytes,5,opt,name=cfg,proto3" json:"cfg,omitempty"`
	Desc   string `protobuf:"bytes,6,opt,name=desc,proto3" json:"desc,omitempty"`
}

func (x *Edid) Reset() {
	*x = Edid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Edid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Edid) ProtoMessage() {}

func (x *Edid) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Edid.ProtoReflect.Descriptor instead.
func (*Edid) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{45}
}

func (x *Edid) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Edid) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *Edid) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Edid) GetModule() string {
	if x != nil {
		return x.Module
	}
	return ""
}

func (x *Edid) GetCfg() string {
	if x != nil {
		return x.Cfg
	}
	return ""
}

func (x *Edid) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

type EdidList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Edid []*Edid `protobuf:"bytes,1,rep,name=edid,proto3" json:"edid,omitempty"`
}

func (x *EdidList) Reset() {
	*x = EdidList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdidList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdidList) ProtoMessage() {}

func (x *EdidList) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdidList.ProtoReflect.Descriptor instead.
func (*EdidList) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{46}
}

func (x *EdidList) GetEdid() []*Edid {
	if x != nil {
		return x.Edid
	}
	return nil
}

type UmtGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Umtid    uint32 `protobuf:"fixed32,2,opt,name=umtid,proto3" json:"umtid,omitempty"`
	Id       string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Parentid string `protobuf:"bytes,4,opt,name=parentid,proto3" json:"parentid,omitempty"`
	Domain   string `protobuf:"bytes,5,opt,name=domain,proto3" json:"domain,omitempty"`
}

func (x *UmtGroup) Reset() {
	*x = UmtGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UmtGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UmtGroup) ProtoMessage() {}

func (x *UmtGroup) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UmtGroup.ProtoReflect.Descriptor instead.
func (*UmtGroup) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{47}
}

func (x *UmtGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UmtGroup) GetUmtid() uint32 {
	if x != nil {
		return x.Umtid
	}
	return 0
}

func (x *UmtGroup) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UmtGroup) GetParentid() string {
	if x != nil {
		return x.Parentid
	}
	return ""
}

func (x *UmtGroup) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

type UmtGroupList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Umtgroup []*UmtGroup `protobuf:"bytes,1,rep,name=umtgroup,proto3" json:"umtgroup,omitempty"`
}

func (x *UmtGroupList) Reset() {
	*x = UmtGroupList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UmtGroupList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UmtGroupList) ProtoMessage() {}

func (x *UmtGroupList) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UmtGroupList.ProtoReflect.Descriptor instead.
func (*UmtGroupList) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{48}
}

func (x *UmtGroupList) GetUmtgroup() []*UmtGroup {
	if x != nil {
		return x.Umtgroup
	}
	return nil
}

type UmtChn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Umtid     uint32 `protobuf:"fixed32,1,opt,name=umtid,proto3" json:"umtid,omitempty"`
	Id        uint32 `protobuf:"fixed32,2,opt,name=id,proto3" json:"id,omitempty"`
	Name      string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Gbid      string `protobuf:"bytes,4,opt,name=gbid,proto3" json:"gbid,omitempty"`
	Parentid  string `protobuf:"bytes,5,opt,name=parentid,proto3" json:"parentid,omitempty"`
	Online    bool   `protobuf:"varint,6,opt,name=online,proto3" json:"online,omitempty"`
	Ip        string `protobuf:"bytes,7,opt,name=ip,proto3" json:"ip,omitempty"`
	Firm      string `protobuf:"bytes,8,opt,name=firm,proto3" json:"firm,omitempty"`
	Longitude string `protobuf:"bytes,9,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Latitude  string `protobuf:"bytes,10,opt,name=latitude,proto3" json:"latitude,omitempty"`
}

func (x *UmtChn) Reset() {
	*x = UmtChn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UmtChn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UmtChn) ProtoMessage() {}

func (x *UmtChn) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UmtChn.ProtoReflect.Descriptor instead.
func (*UmtChn) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{49}
}

func (x *UmtChn) GetUmtid() uint32 {
	if x != nil {
		return x.Umtid
	}
	return 0
}

func (x *UmtChn) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UmtChn) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UmtChn) GetGbid() string {
	if x != nil {
		return x.Gbid
	}
	return ""
}

func (x *UmtChn) GetParentid() string {
	if x != nil {
		return x.Parentid
	}
	return ""
}

func (x *UmtChn) GetOnline() bool {
	if x != nil {
		return x.Online
	}
	return false
}

func (x *UmtChn) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *UmtChn) GetFirm() string {
	if x != nil {
		return x.Firm
	}
	return ""
}

func (x *UmtChn) GetLongitude() string {
	if x != nil {
		return x.Longitude
	}
	return ""
}

func (x *UmtChn) GetLatitude() string {
	if x != nil {
		return x.Latitude
	}
	return ""
}

type UmtChnList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Umtchn []*UmtChn `protobuf:"bytes,1,rep,name=umtchn,proto3" json:"umtchn,omitempty"`
}

func (x *UmtChnList) Reset() {
	*x = UmtChnList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UmtChnList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UmtChnList) ProtoMessage() {}

func (x *UmtChnList) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UmtChnList.ProtoReflect.Descriptor instead.
func (*UmtChnList) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{50}
}

func (x *UmtChnList) GetUmtchn() []*UmtChn {
	if x != nil {
		return x.Umtchn
	}
	return nil
}

type UmtChnState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev   *UmtChn `protobuf:"bytes,1,opt,name=dev,proto3" json:"dev,omitempty"`
	State uint32  `protobuf:"fixed32,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *UmtChnState) Reset() {
	*x = UmtChnState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UmtChnState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UmtChnState) ProtoMessage() {}

func (x *UmtChnState) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UmtChnState.ProtoReflect.Descriptor instead.
func (*UmtChnState) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{51}
}

func (x *UmtChnState) GetDev() *UmtChn {
	if x != nil {
		return x.Dev
	}
	return nil
}

func (x *UmtChnState) GetState() uint32 {
	if x != nil {
		return x.State
	}
	return 0
}

type UmtChnStateList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Umtchnstate []*UmtChnState `protobuf:"bytes,1,rep,name=umtchnstate,proto3" json:"umtchnstate,omitempty"`
}

func (x *UmtChnStateList) Reset() {
	*x = UmtChnStateList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UmtChnStateList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UmtChnStateList) ProtoMessage() {}

func (x *UmtChnStateList) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UmtChnStateList.ProtoReflect.Descriptor instead.
func (*UmtChnStateList) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{52}
}

func (x *UmtChnStateList) GetUmtchnstate() []*UmtChnState {
	if x != nil {
		return x.Umtchnstate
	}
	return nil
}

type ComCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Proto    uint32 `protobuf:"fixed32,1,opt,name=proto,proto3" json:"proto,omitempty"`
	Type     uint32 `protobuf:"fixed32,2,opt,name=type,proto3" json:"type,omitempty"`
	Port     uint32 `protobuf:"fixed32,3,opt,name=port,proto3" json:"port,omitempty"`
	State    bool   `protobuf:"varint,4,opt,name=state,proto3" json:"state,omitempty"`
	Databits uint32 `protobuf:"fixed32,5,opt,name=databits,proto3" json:"databits,omitempty"`
	Stopbits uint32 `protobuf:"fixed32,6,opt,name=stopbits,proto3" json:"stopbits,omitempty"`
	Parity   uint32 `protobuf:"fixed32,7,opt,name=parity,proto3" json:"parity,omitempty"`
	Baudrate uint32 `protobuf:"fixed32,8,opt,name=baudrate,proto3" json:"baudrate,omitempty"`
	Id       uint32 `protobuf:"fixed32,9,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ComCfg) Reset() {
	*x = ComCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComCfg) ProtoMessage() {}

func (x *ComCfg) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComCfg.ProtoReflect.Descriptor instead.
func (*ComCfg) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{53}
}

func (x *ComCfg) GetProto() uint32 {
	if x != nil {
		return x.Proto
	}
	return 0
}

func (x *ComCfg) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ComCfg) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *ComCfg) GetState() bool {
	if x != nil {
		return x.State
	}
	return false
}

func (x *ComCfg) GetDatabits() uint32 {
	if x != nil {
		return x.Databits
	}
	return 0
}

func (x *ComCfg) GetStopbits() uint32 {
	if x != nil {
		return x.Stopbits
	}
	return 0
}

func (x *ComCfg) GetParity() uint32 {
	if x != nil {
		return x.Parity
	}
	return 0
}

func (x *ComCfg) GetBaudrate() uint32 {
	if x != nil {
		return x.Baudrate
	}
	return 0
}

func (x *ComCfg) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ComPtz struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint32 `protobuf:"fixed32,1,opt,name=id,proto3" json:"id,omitempty"`
	Enable bool   `protobuf:"varint,2,opt,name=enable,proto3" json:"enable,omitempty"`
}

func (x *ComPtz) Reset() {
	*x = ComPtz{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComPtz) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComPtz) ProtoMessage() {}

func (x *ComPtz) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComPtz.ProtoReflect.Descriptor instead.
func (*ComPtz) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{54}
}

func (x *ComPtz) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ComPtz) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

type Property struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   uint32 `protobuf:"fixed32,1,opt,name=id,proto3" json:"id,omitempty"`
	Type uint32 `protobuf:"fixed32,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *Property) Reset() {
	*x = Property{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Property) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Property) ProtoMessage() {}

func (x *Property) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Property.ProtoReflect.Descriptor instead.
func (*Property) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{55}
}

func (x *Property) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Property) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type DevBasic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Box     uint32 `protobuf:"fixed32,2,opt,name=box,proto3" json:"box,omitempty"`
	Slot    uint32 `protobuf:"fixed32,3,opt,name=slot,proto3" json:"slot,omitempty"`
	Hid     uint32 `protobuf:"fixed32,4,opt,name=hid,proto3" json:"hid,omitempty"`
	Pid     uint32 `protobuf:"fixed32,5,opt,name=pid,proto3" json:"pid,omitempty"`
	Mac     string `protobuf:"bytes,6,opt,name=mac,proto3" json:"mac,omitempty"`
	Sn      string `protobuf:"bytes,7,opt,name=sn,proto3" json:"sn,omitempty"`
	Model   string `protobuf:"bytes,8,opt,name=model,proto3" json:"model,omitempty"`
	Hwver   string `protobuf:"bytes,9,opt,name=hwver,proto3" json:"hwver,omitempty"`
	Softver string `protobuf:"bytes,10,opt,name=softver,proto3" json:"softver,omitempty"`
	Fwnum   uint32 `protobuf:"fixed32,11,opt,name=fwnum,proto3" json:"fwnum,omitempty"`
	Port    uint32 `protobuf:"fixed32,12,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *DevBasic) Reset() {
	*x = DevBasic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DevBasic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevBasic) ProtoMessage() {}

func (x *DevBasic) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevBasic.ProtoReflect.Descriptor instead.
func (*DevBasic) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{56}
}

func (x *DevBasic) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DevBasic) GetBox() uint32 {
	if x != nil {
		return x.Box
	}
	return 0
}

func (x *DevBasic) GetSlot() uint32 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *DevBasic) GetHid() uint32 {
	if x != nil {
		return x.Hid
	}
	return 0
}

func (x *DevBasic) GetPid() uint32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *DevBasic) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *DevBasic) GetSn() string {
	if x != nil {
		return x.Sn
	}
	return ""
}

func (x *DevBasic) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *DevBasic) GetHwver() string {
	if x != nil {
		return x.Hwver
	}
	return ""
}

func (x *DevBasic) GetSoftver() string {
	if x != nil {
		return x.Softver
	}
	return ""
}

func (x *DevBasic) GetFwnum() uint32 {
	if x != nil {
		return x.Fwnum
	}
	return 0
}

func (x *DevBasic) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type DevInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sn      string    `protobuf:"bytes,1,opt,name=sn,proto3" json:"sn,omitempty"`
	Ip      string    `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Type    uint32    `protobuf:"fixed32,3,opt,name=type,proto3" json:"type,omitempty"`
	Online  bool      `protobuf:"varint,4,opt,name=online,proto3" json:"online,omitempty"`
	Status  uint32    `protobuf:"fixed32,5,opt,name=status,proto3" json:"status,omitempty"`
	Portcap uint32    `protobuf:"fixed32,6,opt,name=portcap,proto3" json:"portcap,omitempty"`
	Base    *DevBasic `protobuf:"bytes,7,opt,name=base,proto3" json:"base,omitempty"`
}

func (x *DevInfo) Reset() {
	*x = DevInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DevInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevInfo) ProtoMessage() {}

func (x *DevInfo) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevInfo.ProtoReflect.Descriptor instead.
func (*DevInfo) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{57}
}

func (x *DevInfo) GetSn() string {
	if x != nil {
		return x.Sn
	}
	return ""
}

func (x *DevInfo) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *DevInfo) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *DevInfo) GetOnline() bool {
	if x != nil {
		return x.Online
	}
	return false
}

func (x *DevInfo) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *DevInfo) GetPortcap() uint32 {
	if x != nil {
		return x.Portcap
	}
	return 0
}

func (x *DevInfo) GetBase() *DevBasic {
	if x != nil {
		return x.Base
	}
	return nil
}

type DevList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev []*DevInfo `protobuf:"bytes,1,rep,name=dev,proto3" json:"dev,omitempty"`
}

func (x *DevList) Reset() {
	*x = DevList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DevList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DevList) ProtoMessage() {}

func (x *DevList) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DevList.ProtoReflect.Descriptor instead.
func (*DevList) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{58}
}

func (x *DevList) GetDev() []*DevInfo {
	if x != nil {
		return x.Dev
	}
	return nil
}

type SearchCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timeout uint32 `protobuf:"fixed32,1,opt,name=timeout,proto3" json:"timeout,omitempty"`
}

func (x *SearchCfg) Reset() {
	*x = SearchCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchCfg) ProtoMessage() {}

func (x *SearchCfg) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchCfg.ProtoReflect.Descriptor instead.
func (*SearchCfg) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{59}
}

func (x *SearchCfg) GetTimeout() uint32 {
	if x != nil {
		return x.Timeout
	}
	return 0
}

type SearchDev struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sn      string `protobuf:"bytes,1,opt,name=sn,proto3" json:"sn,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Model   string `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"`
	Slot    uint32 `protobuf:"fixed32,4,opt,name=slot,proto3" json:"slot,omitempty"`
	Mac     string `protobuf:"bytes,5,opt,name=mac,proto3" json:"mac,omitempty"`
	Ip      string `protobuf:"bytes,6,opt,name=ip,proto3" json:"ip,omitempty"`
	Mask    string `protobuf:"bytes,7,opt,name=mask,proto3" json:"mask,omitempty"`
	Gw      string `protobuf:"bytes,8,opt,name=gw,proto3" json:"gw,omitempty"`
	Runtime uint32 `protobuf:"fixed32,9,opt,name=runtime,proto3" json:"runtime,omitempty"`
	Regip   string `protobuf:"bytes,10,opt,name=regip,proto3" json:"regip,omitempty"`
	Regport uint32 `protobuf:"fixed32,11,opt,name=regport,proto3" json:"regport,omitempty"`
	Softver string `protobuf:"bytes,12,opt,name=softver,proto3" json:"softver,omitempty"`
}

func (x *SearchDev) Reset() {
	*x = SearchDev{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchDev) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchDev) ProtoMessage() {}

func (x *SearchDev) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchDev.ProtoReflect.Descriptor instead.
func (*SearchDev) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{60}
}

func (x *SearchDev) GetSn() string {
	if x != nil {
		return x.Sn
	}
	return ""
}

func (x *SearchDev) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SearchDev) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *SearchDev) GetSlot() uint32 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *SearchDev) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *SearchDev) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *SearchDev) GetMask() string {
	if x != nil {
		return x.Mask
	}
	return ""
}

func (x *SearchDev) GetGw() string {
	if x != nil {
		return x.Gw
	}
	return ""
}

func (x *SearchDev) GetRuntime() uint32 {
	if x != nil {
		return x.Runtime
	}
	return 0
}

func (x *SearchDev) GetRegip() string {
	if x != nil {
		return x.Regip
	}
	return ""
}

func (x *SearchDev) GetRegport() uint32 {
	if x != nil {
		return x.Regport
	}
	return 0
}

func (x *SearchDev) GetSoftver() string {
	if x != nil {
		return x.Softver
	}
	return ""
}

type SearchDevList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev []*SearchDev `protobuf:"bytes,1,rep,name=dev,proto3" json:"dev,omitempty"`
}

func (x *SearchDevList) Reset() {
	*x = SearchDevList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchDevList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchDevList) ProtoMessage() {}

func (x *SearchDevList) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchDevList.ProtoReflect.Descriptor instead.
func (*SearchDevList) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{61}
}

func (x *SearchDevList) GetDev() []*SearchDev {
	if x != nil {
		return x.Dev
	}
	return nil
}

type RegDev struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mac   string `protobuf:"bytes,1,opt,name=mac,proto3" json:"mac,omitempty"`
	Ip    string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Regip string `protobuf:"bytes,3,opt,name=regip,proto3" json:"regip,omitempty"`
}

func (x *RegDev) Reset() {
	*x = RegDev{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegDev) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegDev) ProtoMessage() {}

func (x *RegDev) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegDev.ProtoReflect.Descriptor instead.
func (*RegDev) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{62}
}

func (x *RegDev) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *RegDev) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *RegDev) GetRegip() string {
	if x != nil {
		return x.Regip
	}
	return ""
}

type RegDevList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dev []*RegDev `protobuf:"bytes,1,rep,name=dev,proto3" json:"dev,omitempty"`
}

func (x *RegDevList) Reset() {
	*x = RegDevList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegDevList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegDevList) ProtoMessage() {}

func (x *RegDevList) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegDevList.ProtoReflect.Descriptor instead.
func (*RegDevList) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{63}
}

func (x *RegDevList) GetDev() []*RegDev {
	if x != nil {
		return x.Dev
	}
	return nil
}

type FwInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	No      uint32 `protobuf:"fixed32,1,opt,name=no,proto3" json:"no,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Softver string `protobuf:"bytes,3,opt,name=softver,proto3" json:"softver,omitempty"`
}

func (x *FwInfo) Reset() {
	*x = FwInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FwInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FwInfo) ProtoMessage() {}

func (x *FwInfo) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FwInfo.ProtoReflect.Descriptor instead.
func (*FwInfo) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{64}
}

func (x *FwInfo) GetNo() uint32 {
	if x != nil {
		return x.No
	}
	return 0
}

func (x *FwInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FwInfo) GetSoftver() string {
	if x != nil {
		return x.Softver
	}
	return ""
}

type FwList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sn string    `protobuf:"bytes,1,opt,name=sn,proto3" json:"sn,omitempty"`
	Fw []*FwInfo `protobuf:"bytes,2,rep,name=fw,proto3" json:"fw,omitempty"`
}

func (x *FwList) Reset() {
	*x = FwList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FwList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FwList) ProtoMessage() {}

func (x *FwList) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FwList.ProtoReflect.Descriptor instead.
func (*FwList) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{65}
}

func (x *FwList) GetSn() string {
	if x != nil {
		return x.Sn
	}
	return ""
}

func (x *FwList) GetFw() []*FwInfo {
	if x != nil {
		return x.Fw
	}
	return nil
}

type BatchCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sn   string `protobuf:"bytes,1,opt,name=sn,proto3" json:"sn,omitempty"`
	Ip   string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Type uint32 `protobuf:"fixed32,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *BatchCfg) Reset() {
	*x = BatchCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCfg) ProtoMessage() {}

func (x *BatchCfg) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCfg.ProtoReflect.Descriptor instead.
func (*BatchCfg) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{66}
}

func (x *BatchCfg) GetSn() string {
	if x != nil {
		return x.Sn
	}
	return ""
}

func (x *BatchCfg) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *BatchCfg) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type BatchCfgList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meth  uint32      `protobuf:"fixed32,1,opt,name=meth,proto3" json:"meth,omitempty"`
	Batch []*BatchCfg `protobuf:"bytes,2,rep,name=batch,proto3" json:"batch,omitempty"`
}

func (x *BatchCfgList) Reset() {
	*x = BatchCfgList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchCfgList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCfgList) ProtoMessage() {}

func (x *BatchCfgList) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCfgList.ProtoReflect.Descriptor instead.
func (*BatchCfgList) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{67}
}

func (x *BatchCfgList) GetMeth() uint32 {
	if x != nil {
		return x.Meth
	}
	return 0
}

func (x *BatchCfgList) GetBatch() []*BatchCfg {
	if x != nil {
		return x.Batch
	}
	return nil
}

type BatchInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Meth uint32 `protobuf:"fixed32,1,opt,name=meth,proto3" json:"meth,omitempty"`
	Body string `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *BatchInfo) Reset() {
	*x = BatchInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchInfo) ProtoMessage() {}

func (x *BatchInfo) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchInfo.ProtoReflect.Descriptor instead.
func (*BatchInfo) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{68}
}

func (x *BatchInfo) GetMeth() uint32 {
	if x != nil {
		return x.Meth
	}
	return 0
}

func (x *BatchInfo) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

type BatchProg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sn       string `protobuf:"bytes,1,opt,name=sn,proto3" json:"sn,omitempty"`
	Meth     uint32 `protobuf:"fixed32,2,opt,name=meth,proto3" json:"meth,omitempty"`
	Progress uint32 `protobuf:"fixed32,3,opt,name=progress,proto3" json:"progress,omitempty"`
}

func (x *BatchProg) Reset() {
	*x = BatchProg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchProg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchProg) ProtoMessage() {}

func (x *BatchProg) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchProg.ProtoReflect.Descriptor instead.
func (*BatchProg) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{69}
}

func (x *BatchProg) GetSn() string {
	if x != nil {
		return x.Sn
	}
	return ""
}

func (x *BatchProg) GetMeth() uint32 {
	if x != nil {
		return x.Meth
	}
	return 0
}

func (x *BatchProg) GetProgress() uint32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

type PackageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Path   string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Detail string `protobuf:"bytes,3,opt,name=detail,proto3" json:"detail,omitempty"`
}

func (x *PackageInfo) Reset() {
	*x = PackageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageInfo) ProtoMessage() {}

func (x *PackageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageInfo.ProtoReflect.Descriptor instead.
func (*PackageInfo) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{70}
}

func (x *PackageInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PackageInfo) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *PackageInfo) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

type Advanced struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Front     uint32 `protobuf:"fixed32,1,opt,name=front,proto3" json:"front,omitempty"`
	Back      uint32 `protobuf:"fixed32,2,opt,name=back,proto3" json:"back,omitempty"`
	Syncwidth uint32 `protobuf:"fixed32,3,opt,name=syncwidth,proto3" json:"syncwidth,omitempty"`
	Syncpolar uint32 `protobuf:"fixed32,4,opt,name=syncpolar,proto3" json:"syncpolar,omitempty"`
}

func (x *Advanced) Reset() {
	*x = Advanced{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Advanced) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Advanced) ProtoMessage() {}

func (x *Advanced) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Advanced.ProtoReflect.Descriptor instead.
func (*Advanced) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{71}
}

func (x *Advanced) GetFront() uint32 {
	if x != nil {
		return x.Front
	}
	return 0
}

func (x *Advanced) GetBack() uint32 {
	if x != nil {
		return x.Back
	}
	return 0
}

func (x *Advanced) GetSyncwidth() uint32 {
	if x != nil {
		return x.Syncwidth
	}
	return 0
}

func (x *Advanced) GetSyncpolar() uint32 {
	if x != nil {
		return x.Syncpolar
	}
	return 0
}

type KvmTv struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      uint32   `protobuf:"fixed32,1,opt,name=id,proto3" json:"id,omitempty"`
	Outid   uint32   `protobuf:"fixed32,2,opt,name=outid,proto3" json:"outid,omitempty"`
	Arrayin []uint32 `protobuf:"fixed32,3,rep,packed,name=arrayin,proto3" json:"arrayin,omitempty"`
}

func (x *KvmTv) Reset() {
	*x = KvmTv{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KvmTv) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KvmTv) ProtoMessage() {}

func (x *KvmTv) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KvmTv.ProtoReflect.Descriptor instead.
func (*KvmTv) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{72}
}

func (x *KvmTv) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *KvmTv) GetOutid() uint32 {
	if x != nil {
		return x.Outid
	}
	return 0
}

func (x *KvmTv) GetArrayin() []uint32 {
	if x != nil {
		return x.Arrayin
	}
	return nil
}

type KvmInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id       uint32   `protobuf:"fixed32,2,opt,name=id,proto3" json:"id,omitempty"`
	Row      uint32   `protobuf:"fixed32,3,opt,name=row,proto3" json:"row,omitempty"`
	Col      uint32   `protobuf:"fixed32,4,opt,name=col,proto3" json:"col,omitempty"`
	Module   uint32   `protobuf:"fixed32,5,opt,name=module,proto3" json:"module,omitempty"`
	Menu     bool     `protobuf:"varint,6,opt,name=menu,proto3" json:"menu,omitempty"`
	Arraytv  []*KvmTv `protobuf:"bytes,7,rep,name=arraytv,proto3" json:"arraytv,omitempty"`
	Arraysrc []uint32 `protobuf:"fixed32,8,rep,packed,name=arraysrc,proto3" json:"arraysrc,omitempty"`
}

func (x *KvmInfo) Reset() {
	*x = KvmInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KvmInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KvmInfo) ProtoMessage() {}

func (x *KvmInfo) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KvmInfo.ProtoReflect.Descriptor instead.
func (*KvmInfo) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{73}
}

func (x *KvmInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KvmInfo) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *KvmInfo) GetRow() uint32 {
	if x != nil {
		return x.Row
	}
	return 0
}

func (x *KvmInfo) GetCol() uint32 {
	if x != nil {
		return x.Col
	}
	return 0
}

func (x *KvmInfo) GetModule() uint32 {
	if x != nil {
		return x.Module
	}
	return 0
}

func (x *KvmInfo) GetMenu() bool {
	if x != nil {
		return x.Menu
	}
	return false
}

func (x *KvmInfo) GetArraytv() []*KvmTv {
	if x != nil {
		return x.Arraytv
	}
	return nil
}

func (x *KvmInfo) GetArraysrc() []uint32 {
	if x != nil {
		return x.Arraysrc
	}
	return nil
}

type KvmInfoList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kvminfo []*KvmInfo `protobuf:"bytes,1,rep,name=kvminfo,proto3" json:"kvminfo,omitempty"`
}

func (x *KvmInfoList) Reset() {
	*x = KvmInfoList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KvmInfoList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KvmInfoList) ProtoMessage() {}

func (x *KvmInfoList) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KvmInfoList.ProtoReflect.Descriptor instead.
func (*KvmInfoList) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{74}
}

func (x *KvmInfoList) GetKvminfo() []*KvmInfo {
	if x != nil {
		return x.Kvminfo
	}
	return nil
}

type MonitorInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tvid     uint32    `protobuf:"fixed32,1,opt,name=tvid,proto3" json:"tvid,omitempty"`
	Id       uint32    `protobuf:"fixed32,2,opt,name=id,proto3" json:"id,omitempty"`
	Module   uint32    `protobuf:"fixed32,3,opt,name=module,proto3" json:"module,omitempty"`
	Scantype uint32    `protobuf:"fixed32,4,opt,name=scantype,proto3" json:"scantype,omitempty"`
	Width    uint32    `protobuf:"fixed32,5,opt,name=width,proto3" json:"width,omitempty"`
	Height   uint32    `protobuf:"fixed32,6,opt,name=height,proto3" json:"height,omitempty"`
	Fresh    uint32    `protobuf:"fixed32,7,opt,name=fresh,proto3" json:"fresh,omitempty"`
	Advhor   *Advanced `protobuf:"bytes,8,opt,name=advhor,proto3" json:"advhor,omitempty"`
	Advver   *Advanced `protobuf:"bytes,9,opt,name=advver,proto3" json:"advver,omitempty"`
	Flag     uint32    `protobuf:"fixed32,10,opt,name=flag,proto3" json:"flag,omitempty"`
}

func (x *MonitorInfo) Reset() {
	*x = MonitorInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonitorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonitorInfo) ProtoMessage() {}

func (x *MonitorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonitorInfo.ProtoReflect.Descriptor instead.
func (*MonitorInfo) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{75}
}

func (x *MonitorInfo) GetTvid() uint32 {
	if x != nil {
		return x.Tvid
	}
	return 0
}

func (x *MonitorInfo) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MonitorInfo) GetModule() uint32 {
	if x != nil {
		return x.Module
	}
	return 0
}

func (x *MonitorInfo) GetScantype() uint32 {
	if x != nil {
		return x.Scantype
	}
	return 0
}

func (x *MonitorInfo) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *MonitorInfo) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *MonitorInfo) GetFresh() uint32 {
	if x != nil {
		return x.Fresh
	}
	return 0
}

func (x *MonitorInfo) GetAdvhor() *Advanced {
	if x != nil {
		return x.Advhor
	}
	return nil
}

func (x *MonitorInfo) GetAdvver() *Advanced {
	if x != nil {
		return x.Advver
	}
	return nil
}

func (x *MonitorInfo) GetFlag() uint32 {
	if x != nil {
		return x.Flag
	}
	return 0
}

type KvmPush struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint32 `protobuf:"fixed32,1,opt,name=id,proto3" json:"id,omitempty"`
	Startx uint32 `protobuf:"fixed32,2,opt,name=startx,proto3" json:"startx,omitempty"`
	Starty uint32 `protobuf:"fixed32,3,opt,name=starty,proto3" json:"starty,omitempty"`
	Width  uint32 `protobuf:"fixed32,4,opt,name=width,proto3" json:"width,omitempty"`
	Height uint32 `protobuf:"fixed32,5,opt,name=height,proto3" json:"height,omitempty"`
	Subid  uint32 `protobuf:"fixed32,6,opt,name=subid,proto3" json:"subid,omitempty"`
}

func (x *KvmPush) Reset() {
	*x = KvmPush{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KvmPush) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KvmPush) ProtoMessage() {}

func (x *KvmPush) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KvmPush.ProtoReflect.Descriptor instead.
func (*KvmPush) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{76}
}

func (x *KvmPush) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *KvmPush) GetStartx() uint32 {
	if x != nil {
		return x.Startx
	}
	return 0
}

func (x *KvmPush) GetStarty() uint32 {
	if x != nil {
		return x.Starty
	}
	return 0
}

func (x *KvmPush) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *KvmPush) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *KvmPush) GetSubid() uint32 {
	if x != nil {
		return x.Subid
	}
	return 0
}

type PushCfg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    uint32     `protobuf:"fixed32,1,opt,name=id,proto3" json:"id,omitempty"`
	Type  uint32     `protobuf:"fixed32,2,opt,name=type,proto3" json:"type,omitempty"`
	Dstid []*KvmPush `protobuf:"bytes,3,rep,name=dstid,proto3" json:"dstid,omitempty"`
}

func (x *PushCfg) Reset() {
	*x = PushCfg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushCfg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushCfg) ProtoMessage() {}

func (x *PushCfg) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushCfg.ProtoReflect.Descriptor instead.
func (*PushCfg) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{77}
}

func (x *PushCfg) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PushCfg) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *PushCfg) GetDstid() []*KvmPush {
	if x != nil {
		return x.Dstid
	}
	return nil
}

type KvmGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint32 `protobuf:"fixed32,1,opt,name=id,proto3" json:"id,omitempty"`
	Parentid uint32 `protobuf:"fixed32,2,opt,name=parentid,proto3" json:"parentid,omitempty"`
	Name     string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Memnum   uint32 `protobuf:"fixed32,4,opt,name=memnum,proto3" json:"memnum,omitempty"`
}

func (x *KvmGroup) Reset() {
	*x = KvmGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KvmGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KvmGroup) ProtoMessage() {}

func (x *KvmGroup) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KvmGroup.ProtoReflect.Descriptor instead.
func (*KvmGroup) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{78}
}

func (x *KvmGroup) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *KvmGroup) GetParentid() uint32 {
	if x != nil {
		return x.Parentid
	}
	return 0
}

func (x *KvmGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KvmGroup) GetMemnum() uint32 {
	if x != nil {
		return x.Memnum
	}
	return 0
}

type KvmGroupList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kvmgroup []*KvmGroup `protobuf:"bytes,1,rep,name=kvmgroup,proto3" json:"kvmgroup,omitempty"`
}

func (x *KvmGroupList) Reset() {
	*x = KvmGroupList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KvmGroupList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KvmGroupList) ProtoMessage() {}

func (x *KvmGroupList) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KvmGroupList.ProtoReflect.Descriptor instead.
func (*KvmGroupList) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{79}
}

func (x *KvmGroupList) GetKvmgroup() []*KvmGroup {
	if x != nil {
		return x.Kvmgroup
	}
	return nil
}

type KvmGroupInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Member []*ValueU32 `protobuf:"bytes,1,rep,name=member,proto3" json:"member,omitempty"`
	Group  *KvmGroup   `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`
	Id     uint32      `protobuf:"fixed32,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *KvmGroupInfo) Reset() {
	*x = KvmGroupInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KvmGroupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KvmGroupInfo) ProtoMessage() {}

func (x *KvmGroupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KvmGroupInfo.ProtoReflect.Descriptor instead.
func (*KvmGroupInfo) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{80}
}

func (x *KvmGroupInfo) GetMember() []*ValueU32 {
	if x != nil {
		return x.Member
	}
	return nil
}

func (x *KvmGroupInfo) GetGroup() *KvmGroup {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *KvmGroupInfo) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type FileParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Width    uint32 `protobuf:"fixed32,1,opt,name=width,proto3" json:"width,omitempty"`
	Height   uint32 `protobuf:"fixed32,2,opt,name=height,proto3" json:"height,omitempty"`
	Datatype uint32 `protobuf:"fixed32,3,opt,name=datatype,proto3" json:"datatype,omitempty"`
	Name     string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Size     uint32 `protobuf:"fixed32,5,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *FileParam) Reset() {
	*x = FileParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileParam) ProtoMessage() {}

func (x *FileParam) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileParam.ProtoReflect.Descriptor instead.
func (*FileParam) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{81}
}

func (x *FileParam) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *FileParam) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *FileParam) GetDatatype() uint32 {
	if x != nil {
		return x.Datatype
	}
	return 0
}

func (x *FileParam) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FileParam) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

type KvmFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   uint32       `protobuf:"fixed32,1,opt,name=type,proto3" json:"type,omitempty"`
	Curnum uint32       `protobuf:"fixed32,2,opt,name=curnum,proto3" json:"curnum,omitempty"`
	Offset uint32       `protobuf:"fixed32,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Total  uint32       `protobuf:"fixed32,4,opt,name=total,proto3" json:"total,omitempty"`
	Param  []*FileParam `protobuf:"bytes,5,rep,name=param,proto3" json:"param,omitempty"`
}

func (x *KvmFile) Reset() {
	*x = KvmFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KvmFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KvmFile) ProtoMessage() {}

func (x *KvmFile) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KvmFile.ProtoReflect.Descriptor instead.
func (*KvmFile) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{82}
}

func (x *KvmFile) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *KvmFile) GetCurnum() uint32 {
	if x != nil {
		return x.Curnum
	}
	return 0
}

func (x *KvmFile) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *KvmFile) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *KvmFile) GetParam() []*FileParam {
	if x != nil {
		return x.Param
	}
	return nil
}

type KvmFileNotify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Num    uint32   `protobuf:"fixed32,1,opt,name=num,proto3" json:"num,omitempty"`
	Kvmnum uint32   `protobuf:"fixed32,2,opt,name=kvmnum,proto3" json:"kvmnum,omitempty"`
	Id     []uint32 `protobuf:"fixed32,3,rep,packed,name=id,proto3" json:"id,omitempty"`
}

func (x *KvmFileNotify) Reset() {
	*x = KvmFileNotify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KvmFileNotify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KvmFileNotify) ProtoMessage() {}

func (x *KvmFileNotify) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KvmFileNotify.ProtoReflect.Descriptor instead.
func (*KvmFileNotify) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{83}
}

func (x *KvmFileNotify) GetNum() uint32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *KvmFileNotify) GetKvmnum() uint32 {
	if x != nil {
		return x.Kvmnum
	}
	return 0
}

func (x *KvmFileNotify) GetId() []uint32 {
	if x != nil {
		return x.Id
	}
	return nil
}

type KvmCfgState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State uint32   `protobuf:"fixed32,1,opt,name=state,proto3" json:"state,omitempty"`
	Kvm   *KvmInfo `protobuf:"bytes,2,opt,name=kvm,proto3" json:"kvm,omitempty"`
}

func (x *KvmCfgState) Reset() {
	*x = KvmCfgState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KvmCfgState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KvmCfgState) ProtoMessage() {}

func (x *KvmCfgState) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KvmCfgState.ProtoReflect.Descriptor instead.
func (*KvmCfgState) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{84}
}

func (x *KvmCfgState) GetState() uint32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *KvmCfgState) GetKvm() *KvmInfo {
	if x != nil {
		return x.Kvm
	}
	return nil
}

type KvmState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint32 `protobuf:"fixed32,1,opt,name=id,proto3" json:"id,omitempty"`
	Ip       string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Dstip    string `protobuf:"bytes,3,opt,name=dstip,proto3" json:"dstip,omitempty"`
	Online   bool   `protobuf:"varint,4,opt,name=online,proto3" json:"online,omitempty"`
	Keylink  bool   `protobuf:"varint,5,opt,name=keylink,proto3" json:"keylink,omitempty"`
	Localkey bool   `protobuf:"varint,6,opt,name=localkey,proto3" json:"localkey,omitempty"`
	Trslink  bool   `protobuf:"varint,7,opt,name=trslink,proto3" json:"trslink,omitempty"`
	Check    bool   `protobuf:"varint,8,opt,name=check,proto3" json:"check,omitempty"`
	Type     uint32 `protobuf:"fixed32,9,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *KvmState) Reset() {
	*x = KvmState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KvmState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KvmState) ProtoMessage() {}

func (x *KvmState) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KvmState.ProtoReflect.Descriptor instead.
func (*KvmState) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{85}
}

func (x *KvmState) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *KvmState) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *KvmState) GetDstip() string {
	if x != nil {
		return x.Dstip
	}
	return ""
}

func (x *KvmState) GetOnline() bool {
	if x != nil {
		return x.Online
	}
	return false
}

func (x *KvmState) GetKeylink() bool {
	if x != nil {
		return x.Keylink
	}
	return false
}

func (x *KvmState) GetLocalkey() bool {
	if x != nil {
		return x.Localkey
	}
	return false
}

func (x *KvmState) GetTrslink() bool {
	if x != nil {
		return x.Trslink
	}
	return false
}

func (x *KvmState) GetCheck() bool {
	if x != nil {
		return x.Check
	}
	return false
}

func (x *KvmState) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type KvmStateList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kvmstate []*KvmState `protobuf:"bytes,1,rep,name=kvmstate,proto3" json:"kvmstate,omitempty"`
}

func (x *KvmStateList) Reset() {
	*x = KvmStateList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KvmStateList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KvmStateList) ProtoMessage() {}

func (x *KvmStateList) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KvmStateList.ProtoReflect.Descriptor instead.
func (*KvmStateList) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{86}
}

func (x *KvmStateList) GetKvmstate() []*KvmState {
	if x != nil {
		return x.Kvmstate
	}
	return nil
}

type PowerPrm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Protocol uint32   `protobuf:"fixed32,1,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Mode     uint32   `protobuf:"fixed32,2,opt,name=mode,proto3" json:"mode,omitempty"`
	Chnid    []uint32 `protobuf:"fixed32,3,rep,packed,name=chnid,proto3" json:"chnid,omitempty"`
	Ip       string   `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`
	On       string   `protobuf:"bytes,5,opt,name=on,proto3" json:"on,omitempty"`
	Off      string   `protobuf:"bytes,6,opt,name=off,proto3" json:"off,omitempty"`
	Mac      string   `protobuf:"bytes,7,opt,name=mac,proto3" json:"mac,omitempty"`
	Slot     uint32   `protobuf:"fixed32,8,opt,name=slot,proto3" json:"slot,omitempty"`
}

func (x *PowerPrm) Reset() {
	*x = PowerPrm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PowerPrm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PowerPrm) ProtoMessage() {}

func (x *PowerPrm) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PowerPrm.ProtoReflect.Descriptor instead.
func (*PowerPrm) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{87}
}

func (x *PowerPrm) GetProtocol() uint32 {
	if x != nil {
		return x.Protocol
	}
	return 0
}

func (x *PowerPrm) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *PowerPrm) GetChnid() []uint32 {
	if x != nil {
		return x.Chnid
	}
	return nil
}

func (x *PowerPrm) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *PowerPrm) GetOn() string {
	if x != nil {
		return x.On
	}
	return ""
}

func (x *PowerPrm) GetOff() string {
	if x != nil {
		return x.Off
	}
	return ""
}

func (x *PowerPrm) GetMac() string {
	if x != nil {
		return x.Mac
	}
	return ""
}

func (x *PowerPrm) GetSlot() uint32 {
	if x != nil {
		return x.Slot
	}
	return 0
}

type ChnList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chnid []uint32 `protobuf:"fixed32,1,rep,packed,name=chnid,proto3" json:"chnid,omitempty"`
}

func (x *ChnList) Reset() {
	*x = ChnList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChnList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChnList) ProtoMessage() {}

func (x *ChnList) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChnList.ProtoReflect.Descriptor instead.
func (*ChnList) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{88}
}

func (x *ChnList) GetChnid() []uint32 {
	if x != nil {
		return x.Chnid
	}
	return nil
}

type PowerPrms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Powerprm []*PowerPrm `protobuf:"bytes,1,rep,name=powerprm,proto3" json:"powerprm,omitempty"`
}

func (x *PowerPrms) Reset() {
	*x = PowerPrms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PowerPrms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PowerPrms) ProtoMessage() {}

func (x *PowerPrms) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PowerPrms.ProtoReflect.Descriptor instead.
func (*PowerPrms) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{89}
}

func (x *PowerPrms) GetPowerprm() []*PowerPrm {
	if x != nil {
		return x.Powerprm
	}
	return nil
}

type PcInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint32 `protobuf:"fixed32,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Ip       string `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	Port     uint32 `protobuf:"fixed32,4,opt,name=port,proto3" json:"port,omitempty"`
	Cnntmode uint32 `protobuf:"fixed32,5,opt,name=cnntmode,proto3" json:"cnntmode,omitempty"`
}

func (x *PcInfo) Reset() {
	*x = PcInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PcInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PcInfo) ProtoMessage() {}

func (x *PcInfo) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PcInfo.ProtoReflect.Descriptor instead.
func (*PcInfo) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{90}
}

func (x *PcInfo) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PcInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PcInfo) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *PcInfo) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *PcInfo) GetCnntmode() uint32 {
	if x != nil {
		return x.Cnntmode
	}
	return 0
}

type PcInfoList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pcinfo []*PcInfo `protobuf:"bytes,1,rep,name=pcinfo,proto3" json:"pcinfo,omitempty"`
}

func (x *PcInfoList) Reset() {
	*x = PcInfoList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PcInfoList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PcInfoList) ProtoMessage() {}

func (x *PcInfoList) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PcInfoList.ProtoReflect.Descriptor instead.
func (*PcInfoList) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{91}
}

func (x *PcInfoList) GetPcinfo() []*PcInfo {
	if x != nil {
		return x.Pcinfo
	}
	return nil
}

type PcList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id []uint32 `protobuf:"fixed32,1,rep,packed,name=id,proto3" json:"id,omitempty"`
}

func (x *PcList) Reset() {
	*x = PcList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PcList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PcList) ProtoMessage() {}

func (x *PcList) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PcList.ProtoReflect.Descriptor instead.
func (*PcList) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{92}
}

func (x *PcList) GetId() []uint32 {
	if x != nil {
		return x.Id
	}
	return nil
}

type Scheme struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id     uint32 `protobuf:"fixed32,2,opt,name=id,proto3" json:"id,omitempty"`
	Tvid   uint32 `protobuf:"fixed32,3,opt,name=tvid,proto3" json:"tvid,omitempty"`
	Wndnum uint32 `protobuf:"fixed32,4,opt,name=wndnum,proto3" json:"wndnum,omitempty"`
}

func (x *Scheme) Reset() {
	*x = Scheme{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scheme) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scheme) ProtoMessage() {}

func (x *Scheme) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scheme.ProtoReflect.Descriptor instead.
func (*Scheme) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{93}
}

func (x *Scheme) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Scheme) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Scheme) GetTvid() uint32 {
	if x != nil {
		return x.Tvid
	}
	return 0
}

func (x *Scheme) GetWndnum() uint32 {
	if x != nil {
		return x.Wndnum
	}
	return 0
}

type Schemes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Isend  bool      `protobuf:"varint,1,opt,name=isend,proto3" json:"isend,omitempty"`
	Scheme []*Scheme `protobuf:"bytes,2,rep,name=scheme,proto3" json:"scheme,omitempty"`
}

func (x *Schemes) Reset() {
	*x = Schemes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schemes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schemes) ProtoMessage() {}

func (x *Schemes) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schemes.ProtoReflect.Descriptor instead.
func (*Schemes) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{94}
}

func (x *Schemes) GetIsend() bool {
	if x != nil {
		return x.Isend
	}
	return false
}

func (x *Schemes) GetScheme() []*Scheme {
	if x != nil {
		return x.Scheme
	}
	return nil
}

type Tswid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      uint32 `protobuf:"fixed32,1,opt,name=id,proto3" json:"id,omitempty"`
	Sceneid uint32 `protobuf:"fixed32,2,opt,name=sceneid,proto3" json:"sceneid,omitempty"`
	Tvid    uint32 `protobuf:"fixed32,3,opt,name=tvid,proto3" json:"tvid,omitempty"`
}

func (x *Tswid) Reset() {
	*x = Tswid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tswid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tswid) ProtoMessage() {}

func (x *Tswid) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tswid.ProtoReflect.Descriptor instead.
func (*Tswid) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{95}
}

func (x *Tswid) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Tswid) GetSceneid() uint32 {
	if x != nil {
		return x.Sceneid
	}
	return 0
}

func (x *Tswid) GetTvid() uint32 {
	if x != nil {
		return x.Tvid
	}
	return 0
}

type PollPrm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keep     uint32 `protobuf:"fixed32,1,opt,name=keep,proto3" json:"keep,omitempty"`
	Issame   bool   `protobuf:"varint,2,opt,name=issame,proto3" json:"issame,omitempty"`
	Interval uint32 `protobuf:"fixed32,3,opt,name=interval,proto3" json:"interval,omitempty"`
	Beid     *Tswid `protobuf:"bytes,4,opt,name=beid,proto3" json:"beid,omitempty"`
}

func (x *PollPrm) Reset() {
	*x = PollPrm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PollPrm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollPrm) ProtoMessage() {}

func (x *PollPrm) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollPrm.ProtoReflect.Descriptor instead.
func (*PollPrm) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{96}
}

func (x *PollPrm) GetKeep() uint32 {
	if x != nil {
		return x.Keep
	}
	return 0
}

func (x *PollPrm) GetIssame() bool {
	if x != nil {
		return x.Issame
	}
	return false
}

func (x *PollPrm) GetInterval() uint32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *PollPrm) GetBeid() *Tswid {
	if x != nil {
		return x.Beid
	}
	return nil
}

type Poll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pollmem []*PollMem `protobuf:"bytes,1,rep,name=pollmem,proto3" json:"pollmem,omitempty"`
	Param   *PollPrm   `protobuf:"bytes,2,opt,name=param,proto3" json:"param,omitempty"`
	Beid    *Tswid     `protobuf:"bytes,3,opt,name=beid,proto3" json:"beid,omitempty"`
}

func (x *Poll) Reset() {
	*x = Poll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Poll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Poll) ProtoMessage() {}

func (x *Poll) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Poll.ProtoReflect.Descriptor instead.
func (*Poll) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{97}
}

func (x *Poll) GetPollmem() []*PollMem {
	if x != nil {
		return x.Pollmem
	}
	return nil
}

func (x *Poll) GetParam() *PollPrm {
	if x != nil {
		return x.Param
	}
	return nil
}

func (x *Poll) GetBeid() *Tswid {
	if x != nil {
		return x.Beid
	}
	return nil
}

type PollMem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interval uint32 `protobuf:"fixed32,1,opt,name=interval,proto3" json:"interval,omitempty"`
	Id       uint32 `protobuf:"fixed32,2,opt,name=id,proto3" json:"id,omitempty"`
	Name     string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *PollMem) Reset() {
	*x = PollMem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PollMem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollMem) ProtoMessage() {}

func (x *PollMem) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollMem.ProtoReflect.Descriptor instead.
func (*PollMem) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{98}
}

func (x *PollMem) GetInterval() uint32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *PollMem) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PollMem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type PollMems struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pollmem []*PollMem `protobuf:"bytes,1,rep,name=pollmem,proto3" json:"pollmem,omitempty"`
}

func (x *PollMems) Reset() {
	*x = PollMems{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PollMems) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollMems) ProtoMessage() {}

func (x *PollMems) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollMems.ProtoReflect.Descriptor instead.
func (*PollMems) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{99}
}

func (x *PollMems) GetPollmem() []*PollMem {
	if x != nil {
		return x.Pollmem
	}
	return nil
}

type SchemeState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State  *ValueU32 `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	Scheme *Scheme   `protobuf:"bytes,2,opt,name=scheme,proto3" json:"scheme,omitempty"`
}

func (x *SchemeState) Reset() {
	*x = SchemeState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchemeState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemeState) ProtoMessage() {}

func (x *SchemeState) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemeState.ProtoReflect.Descriptor instead.
func (*SchemeState) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{100}
}

func (x *SchemeState) GetState() *ValueU32 {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *SchemeState) GetScheme() *Scheme {
	if x != nil {
		return x.Scheme
	}
	return nil
}

type PollState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State uint32 `protobuf:"fixed32,1,opt,name=state,proto3" json:"state,omitempty"`
	Id    uint32 `protobuf:"fixed32,2,opt,name=id,proto3" json:"id,omitempty"`
	Beid  *Tswid `protobuf:"bytes,3,opt,name=beid,proto3" json:"beid,omitempty"`
}

func (x *PollState) Reset() {
	*x = PollState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PollState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollState) ProtoMessage() {}

func (x *PollState) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollState.ProtoReflect.Descriptor instead.
func (*PollState) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{101}
}

func (x *PollState) GetState() uint32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *PollState) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PollState) GetBeid() *Tswid {
	if x != nil {
		return x.Beid
	}
	return nil
}

type PollStates struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pollstate []*PollState `protobuf:"bytes,1,rep,name=pollstate,proto3" json:"pollstate,omitempty"`
}

func (x *PollStates) Reset() {
	*x = PollStates{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PollStates) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollStates) ProtoMessage() {}

func (x *PollStates) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollStates.ProtoReflect.Descriptor instead.
func (*PollStates) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{102}
}

func (x *PollStates) GetPollstate() []*PollState {
	if x != nil {
		return x.Pollstate
	}
	return nil
}

type FilterForm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value uint32   `protobuf:"fixed32,1,opt,name=value,proto3" json:"value,omitempty"`
	Ip    []string `protobuf:"bytes,2,rep,name=ip,proto3" json:"ip,omitempty"`
}

func (x *FilterForm) Reset() {
	*x = FilterForm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilterForm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilterForm) ProtoMessage() {}

func (x *FilterForm) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilterForm.ProtoReflect.Descriptor instead.
func (*FilterForm) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{103}
}

func (x *FilterForm) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *FilterForm) GetIp() []string {
	if x != nil {
		return x.Ip
	}
	return nil
}

type Time struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Zone   string `protobuf:"bytes,1,opt,name=zone,proto3" json:"zone,omitempty"`
	Year   uint32 `protobuf:"fixed32,2,opt,name=year,proto3" json:"year,omitempty"`
	Month  uint32 `protobuf:"fixed32,3,opt,name=month,proto3" json:"month,omitempty"`
	Day    uint32 `protobuf:"fixed32,4,opt,name=day,proto3" json:"day,omitempty"`
	Hour   uint32 `protobuf:"fixed32,5,opt,name=hour,proto3" json:"hour,omitempty"`
	Minute uint32 `protobuf:"fixed32,6,opt,name=minute,proto3" json:"minute,omitempty"`
	Second uint32 `protobuf:"fixed32,7,opt,name=second,proto3" json:"second,omitempty"`
}

func (x *Time) Reset() {
	*x = Time{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Time) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Time) ProtoMessage() {}

func (x *Time) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Time.ProtoReflect.Descriptor instead.
func (*Time) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{104}
}

func (x *Time) GetZone() string {
	if x != nil {
		return x.Zone
	}
	return ""
}

func (x *Time) GetYear() uint32 {
	if x != nil {
		return x.Year
	}
	return 0
}

func (x *Time) GetMonth() uint32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *Time) GetDay() uint32 {
	if x != nil {
		return x.Day
	}
	return 0
}

func (x *Time) GetHour() uint32 {
	if x != nil {
		return x.Hour
	}
	return 0
}

func (x *Time) GetMinute() uint32 {
	if x != nil {
		return x.Minute
	}
	return 0
}

func (x *Time) GetSecond() uint32 {
	if x != nil {
		return x.Second
	}
	return 0
}

type AccessCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Opt  bool   `protobuf:"varint,2,opt,name=opt,proto3" json:"opt,omitempty"`
}

func (x *AccessCode) Reset() {
	*x = AccessCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessCode) ProtoMessage() {}

func (x *AccessCode) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessCode.ProtoReflect.Descriptor instead.
func (*AccessCode) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{105}
}

func (x *AccessCode) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *AccessCode) GetOpt() bool {
	if x != nil {
		return x.Opt
	}
	return false
}

type SysLicence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host    string   `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	No      string   `protobuf:"bytes,2,opt,name=no,proto3" json:"no,omitempty"`
	Version string   `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Type    uint32   `protobuf:"fixed32,4,opt,name=type,proto3" json:"type,omitempty"`
	State   uint32   `protobuf:"fixed32,5,opt,name=state,proto3" json:"state,omitempty"`
	Enccap  int32    `protobuf:"zigzag32,6,opt,name=enccap,proto3" json:"enccap,omitempty"`
	Module  uint32   `protobuf:"fixed32,7,opt,name=module,proto3" json:"module,omitempty"`
	Expdata []uint32 `protobuf:"fixed32,8,rep,packed,name=expdata,proto3" json:"expdata,omitempty"`
}

func (x *SysLicence) Reset() {
	*x = SysLicence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysLicence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysLicence) ProtoMessage() {}

func (x *SysLicence) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysLicence.ProtoReflect.Descriptor instead.
func (*SysLicence) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{106}
}

func (x *SysLicence) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *SysLicence) GetNo() string {
	if x != nil {
		return x.No
	}
	return ""
}

func (x *SysLicence) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *SysLicence) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *SysLicence) GetState() uint32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *SysLicence) GetEnccap() int32 {
	if x != nil {
		return x.Enccap
	}
	return 0
}

func (x *SysLicence) GetModule() uint32 {
	if x != nil {
		return x.Module
	}
	return 0
}

func (x *SysLicence) GetExpdata() []uint32 {
	if x != nil {
		return x.Expdata
	}
	return nil
}

type LicenceState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Module   uint32 `protobuf:"fixed32,1,opt,name=module,proto3" json:"module,omitempty"`
	Value    bool   `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	Effecdue uint32 `protobuf:"fixed32,3,opt,name=effecdue,proto3" json:"effecdue,omitempty"`
}

func (x *LicenceState) Reset() {
	*x = LicenceState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LicenceState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicenceState) ProtoMessage() {}

func (x *LicenceState) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LicenceState.ProtoReflect.Descriptor instead.
func (*LicenceState) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{107}
}

func (x *LicenceState) GetModule() uint32 {
	if x != nil {
		return x.Module
	}
	return 0
}

func (x *LicenceState) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

func (x *LicenceState) GetEffecdue() uint32 {
	if x != nil {
		return x.Effecdue
	}
	return 0
}

type LicenceStateList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Licence []*LicenceState `protobuf:"bytes,1,rep,name=licence,proto3" json:"licence,omitempty"`
}

func (x *LicenceStateList) Reset() {
	*x = LicenceStateList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LicenceStateList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicenceStateList) ProtoMessage() {}

func (x *LicenceStateList) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LicenceStateList.ProtoReflect.Descriptor instead.
func (*LicenceStateList) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{108}
}

func (x *LicenceStateList) GetLicence() []*LicenceState {
	if x != nil {
		return x.Licence
	}
	return nil
}

type FileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size     uint32 `protobuf:"fixed32,1,opt,name=size,proto3" json:"size,omitempty"`
	Checksum uint32 `protobuf:"fixed32,2,opt,name=checksum,proto3" json:"checksum,omitempty"`
	Name     string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Opt      uint32 `protobuf:"fixed32,4,opt,name=opt,proto3" json:"opt,omitempty"`
}

func (x *FileInfo) Reset() {
	*x = FileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfo) ProtoMessage() {}

func (x *FileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfo.ProtoReflect.Descriptor instead.
func (*FileInfo) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{109}
}

func (x *FileInfo) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FileInfo) GetChecksum() uint32 {
	if x != nil {
		return x.Checksum
	}
	return 0
}

func (x *FileInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FileInfo) GetOpt() uint32 {
	if x != nil {
		return x.Opt
	}
	return 0
}

type Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Box   uint32 `protobuf:"fixed32,1,opt,name=box,proto3" json:"box,omitempty"`
	Slot  uint32 `protobuf:"fixed32,2,opt,name=slot,proto3" json:"slot,omitempty"`
	Port  uint32 `protobuf:"fixed32,3,opt,name=port,proto3" json:"port,omitempty"`
	Isuse uint32 `protobuf:"fixed32,4,opt,name=isuse,proto3" json:"isuse,omitempty"`
}

func (x *Resource) Reset() {
	*x = Resource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource) ProtoMessage() {}

func (x *Resource) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource.ProtoReflect.Descriptor instead.
func (*Resource) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{110}
}

func (x *Resource) GetBox() uint32 {
	if x != nil {
		return x.Box
	}
	return 0
}

func (x *Resource) GetSlot() uint32 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *Resource) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Resource) GetIsuse() uint32 {
	if x != nil {
		return x.Isuse
	}
	return 0
}

type Recoder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id       uint32      `protobuf:"fixed32,2,opt,name=id,proto3" json:"id,omitempty"`
	Tvid     uint32      `protobuf:"fixed32,3,opt,name=tvid,proto3" json:"tvid,omitempty"`
	Mode     uint32      `protobuf:"fixed32,4,opt,name=mode,proto3" json:"mode,omitempty"`
	States   uint32      `protobuf:"fixed32,5,opt,name=states,proto3" json:"states,omitempty"`
	Resource []*Resource `protobuf:"bytes,6,rep,name=resource,proto3" json:"resource,omitempty"`
}

func (x *Recoder) Reset() {
	*x = Recoder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Recoder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Recoder) ProtoMessage() {}

func (x *Recoder) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Recoder.ProtoReflect.Descriptor instead.
func (*Recoder) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{111}
}

func (x *Recoder) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Recoder) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Recoder) GetTvid() uint32 {
	if x != nil {
		return x.Tvid
	}
	return 0
}

func (x *Recoder) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *Recoder) GetStates() uint32 {
	if x != nil {
		return x.States
	}
	return 0
}

func (x *Recoder) GetResource() []*Resource {
	if x != nil {
		return x.Resource
	}
	return nil
}

type Recoders struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Recoder []*Recoder `protobuf:"bytes,1,rep,name=recoder,proto3" json:"recoder,omitempty"`
}

func (x *Recoders) Reset() {
	*x = Recoders{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Recoders) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Recoders) ProtoMessage() {}

func (x *Recoders) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Recoders.ProtoReflect.Descriptor instead.
func (*Recoders) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{112}
}

func (x *Recoders) GetRecoder() []*Recoder {
	if x != nil {
		return x.Recoder
	}
	return nil
}

type RecoderBoard struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Box     uint32 `protobuf:"fixed32,2,opt,name=box,proto3" json:"box,omitempty"`
	Slot    uint32 `protobuf:"fixed32,3,opt,name=slot,proto3" json:"slot,omitempty"`
	Portnum uint32 `protobuf:"fixed32,4,opt,name=portnum,proto3" json:"portnum,omitempty"`
	State   uint32 `protobuf:"fixed32,5,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *RecoderBoard) Reset() {
	*x = RecoderBoard{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoderBoard) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoderBoard) ProtoMessage() {}

func (x *RecoderBoard) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoderBoard.ProtoReflect.Descriptor instead.
func (*RecoderBoard) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{113}
}

func (x *RecoderBoard) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecoderBoard) GetBox() uint32 {
	if x != nil {
		return x.Box
	}
	return 0
}

func (x *RecoderBoard) GetSlot() uint32 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *RecoderBoard) GetPortnum() uint32 {
	if x != nil {
		return x.Portnum
	}
	return 0
}

func (x *RecoderBoard) GetState() uint32 {
	if x != nil {
		return x.State
	}
	return 0
}

type RecoderBoards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Recoderboard []*RecoderBoard `protobuf:"bytes,1,rep,name=recoderboard,proto3" json:"recoderboard,omitempty"`
}

func (x *RecoderBoards) Reset() {
	*x = RecoderBoards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecoderBoards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecoderBoards) ProtoMessage() {}

func (x *RecoderBoards) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecoderBoards.ProtoReflect.Descriptor instead.
func (*RecoderBoards) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{114}
}

func (x *RecoderBoards) GetRecoderboard() []*RecoderBoard {
	if x != nil {
		return x.Recoderboard
	}
	return nil
}

type PlatInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mmsp     string `protobuf:"bytes,1,opt,name=mmsp,proto3" json:"mmsp,omitempty"`
	Msp      string `protobuf:"bytes,2,opt,name=msp,proto3" json:"msp,omitempty"`
	Name     string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Mode     uint32 `protobuf:"fixed32,4,opt,name=mode,proto3" json:"mode,omitempty"`
	Box      uint32 `protobuf:"fixed32,5,opt,name=box,proto3" json:"box,omitempty"`
	State    uint32 `protobuf:"fixed32,6,opt,name=state,proto3" json:"state,omitempty"`
	Enable   uint32 `protobuf:"fixed32,7,opt,name=enable,proto3" json:"enable,omitempty"`
	Ip       string `protobuf:"bytes,8,opt,name=ip,proto3" json:"ip,omitempty"`
	Domain   string `protobuf:"bytes,9,opt,name=domain,proto3" json:"domain,omitempty"`
	Port     uint32 `protobuf:"fixed32,10,opt,name=port,proto3" json:"port,omitempty"`
	Username string `protobuf:"bytes,11,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,12,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *PlatInfo) Reset() {
	*x = PlatInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlatInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlatInfo) ProtoMessage() {}

func (x *PlatInfo) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlatInfo.ProtoReflect.Descriptor instead.
func (*PlatInfo) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{115}
}

func (x *PlatInfo) GetMmsp() string {
	if x != nil {
		return x.Mmsp
	}
	return ""
}

func (x *PlatInfo) GetMsp() string {
	if x != nil {
		return x.Msp
	}
	return ""
}

func (x *PlatInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PlatInfo) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *PlatInfo) GetBox() uint32 {
	if x != nil {
		return x.Box
	}
	return 0
}

func (x *PlatInfo) GetState() uint32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *PlatInfo) GetEnable() uint32 {
	if x != nil {
		return x.Enable
	}
	return 0
}

func (x *PlatInfo) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *PlatInfo) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *PlatInfo) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *PlatInfo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *PlatInfo) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type PlatInfos struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Platinfo []*PlatInfo `protobuf:"bytes,1,rep,name=platinfo,proto3" json:"platinfo,omitempty"`
}

func (x *PlatInfos) Reset() {
	*x = PlatInfos{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlatInfos) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlatInfos) ProtoMessage() {}

func (x *PlatInfos) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlatInfos.ProtoReflect.Descriptor instead.
func (*PlatInfos) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{116}
}

func (x *PlatInfos) GetPlatinfo() []*PlatInfo {
	if x != nil {
		return x.Platinfo
	}
	return nil
}

type CascChnl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Box   uint32 `protobuf:"fixed32,1,opt,name=box,proto3" json:"box,omitempty"`
	Slot  uint32 `protobuf:"fixed32,2,opt,name=slot,proto3" json:"slot,omitempty"`
	Port  uint32 `protobuf:"fixed32,3,opt,name=port,proto3" json:"port,omitempty"`
	Type  uint32 `protobuf:"fixed32,4,opt,name=type,proto3" json:"type,omitempty"`
	Cbox  uint32 `protobuf:"fixed32,5,opt,name=cbox,proto3" json:"cbox,omitempty"`
	Cslot uint32 `protobuf:"fixed32,6,opt,name=cslot,proto3" json:"cslot,omitempty"`
	Cport uint32 `protobuf:"fixed32,7,opt,name=cport,proto3" json:"cport,omitempty"`
	Cip   string `protobuf:"bytes,8,opt,name=cip,proto3" json:"cip,omitempty"`
}

func (x *CascChnl) Reset() {
	*x = CascChnl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CascChnl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CascChnl) ProtoMessage() {}

func (x *CascChnl) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CascChnl.ProtoReflect.Descriptor instead.
func (*CascChnl) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{117}
}

func (x *CascChnl) GetBox() uint32 {
	if x != nil {
		return x.Box
	}
	return 0
}

func (x *CascChnl) GetSlot() uint32 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *CascChnl) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *CascChnl) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *CascChnl) GetCbox() uint32 {
	if x != nil {
		return x.Cbox
	}
	return 0
}

func (x *CascChnl) GetCslot() uint32 {
	if x != nil {
		return x.Cslot
	}
	return 0
}

func (x *CascChnl) GetCport() uint32 {
	if x != nil {
		return x.Cport
	}
	return 0
}

func (x *CascChnl) GetCip() string {
	if x != nil {
		return x.Cip
	}
	return ""
}

type CascChnls struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cascchnl []*CascChnl `protobuf:"bytes,1,rep,name=cascchnl,proto3" json:"cascchnl,omitempty"`
}

func (x *CascChnls) Reset() {
	*x = CascChnls{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CascChnls) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CascChnls) ProtoMessage() {}

func (x *CascChnls) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CascChnls.ProtoReflect.Descriptor instead.
func (*CascChnls) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{118}
}

func (x *CascChnls) GetCascchnl() []*CascChnl {
	if x != nil {
		return x.Cascchnl
	}
	return nil
}

type CascPipe struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sn    string `protobuf:"bytes,1,opt,name=sn,proto3" json:"sn,omitempty"`
	Url   string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Param string `protobuf:"bytes,3,opt,name=param,proto3" json:"param,omitempty"`
}

func (x *CascPipe) Reset() {
	*x = CascPipe{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CascPipe) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CascPipe) ProtoMessage() {}

func (x *CascPipe) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CascPipe.ProtoReflect.Descriptor instead.
func (*CascPipe) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{119}
}

func (x *CascPipe) GetSn() string {
	if x != nil {
		return x.Sn
	}
	return ""
}

func (x *CascPipe) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *CascPipe) GetParam() string {
	if x != nil {
		return x.Param
	}
	return ""
}

type CashChnlPrm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Opt      uint32      `protobuf:"fixed32,1,opt,name=opt,proto3" json:"opt,omitempty"`
	Cascchnl []*CascChnl `protobuf:"bytes,2,rep,name=cascchnl,proto3" json:"cascchnl,omitempty"`
}

func (x *CashChnlPrm) Reset() {
	*x = CashChnlPrm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CashChnlPrm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CashChnlPrm) ProtoMessage() {}

func (x *CashChnlPrm) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CashChnlPrm.ProtoReflect.Descriptor instead.
func (*CashChnlPrm) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{120}
}

func (x *CashChnlPrm) GetOpt() uint32 {
	if x != nil {
		return x.Opt
	}
	return 0
}

func (x *CashChnlPrm) GetCascchnl() []*CascChnl {
	if x != nil {
		return x.Cascchnl
	}
	return nil
}

type TvBasic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id      uint32 `protobuf:"fixed32,2,opt,name=id,proto3" json:"id,omitempty"`
	Kvm     bool   `protobuf:"varint,3,opt,name=kvm,proto3" json:"kvm,omitempty"`
	Rate    uint32 `protobuf:"fixed32,4,opt,name=rate,proto3" json:"rate,omitempty"`
	Row     uint32 `protobuf:"fixed32,5,opt,name=row,proto3" json:"row,omitempty"`
	Col     uint32 `protobuf:"fixed32,6,opt,name=col,proto3" json:"col,omitempty"`
	Width   uint32 `protobuf:"fixed32,7,opt,name=width,proto3" json:"width,omitempty"`
	Height  uint32 `protobuf:"fixed32,8,opt,name=height,proto3" json:"height,omitempty"`
	Cellnum uint32 `protobuf:"fixed32,9,opt,name=cellnum,proto3" json:"cellnum,omitempty"`
	Backid  uint32 `protobuf:"fixed32,10,opt,name=backid,proto3" json:"backid,omitempty"`
}

func (x *TvBasic) Reset() {
	*x = TvBasic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TvBasic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TvBasic) ProtoMessage() {}

func (x *TvBasic) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TvBasic.ProtoReflect.Descriptor instead.
func (*TvBasic) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{121}
}

func (x *TvBasic) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TvBasic) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TvBasic) GetKvm() bool {
	if x != nil {
		return x.Kvm
	}
	return false
}

func (x *TvBasic) GetRate() uint32 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *TvBasic) GetRow() uint32 {
	if x != nil {
		return x.Row
	}
	return 0
}

func (x *TvBasic) GetCol() uint32 {
	if x != nil {
		return x.Col
	}
	return 0
}

func (x *TvBasic) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *TvBasic) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *TvBasic) GetCellnum() uint32 {
	if x != nil {
		return x.Cellnum
	}
	return 0
}

func (x *TvBasic) GetBackid() uint32 {
	if x != nil {
		return x.Backid
	}
	return 0
}

type TvList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tvbasic []*TvBasic `protobuf:"bytes,1,rep,name=tvbasic,proto3" json:"tvbasic,omitempty"`
}

func (x *TvList) Reset() {
	*x = TvList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TvList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TvList) ProtoMessage() {}

func (x *TvList) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TvList.ProtoReflect.Descriptor instead.
func (*TvList) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{122}
}

func (x *TvList) GetTvbasic() []*TvBasic {
	if x != nil {
		return x.Tvbasic
	}
	return nil
}

type TvCell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint32 `protobuf:"fixed32,1,opt,name=id,proto3" json:"id,omitempty"`
	Chnid  uint32 `protobuf:"fixed32,2,opt,name=chnid,proto3" json:"chnid,omitempty"`
	Startx uint32 `protobuf:"fixed32,3,opt,name=startx,proto3" json:"startx,omitempty"`
	Starty uint32 `protobuf:"fixed32,4,opt,name=starty,proto3" json:"starty,omitempty"`
	Width  uint32 `protobuf:"fixed32,5,opt,name=width,proto3" json:"width,omitempty"`
	Hight  uint32 `protobuf:"fixed32,6,opt,name=hight,proto3" json:"hight,omitempty"`
}

func (x *TvCell) Reset() {
	*x = TvCell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TvCell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TvCell) ProtoMessage() {}

func (x *TvCell) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TvCell.ProtoReflect.Descriptor instead.
func (*TvCell) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{123}
}

func (x *TvCell) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TvCell) GetChnid() uint32 {
	if x != nil {
		return x.Chnid
	}
	return 0
}

func (x *TvCell) GetStartx() uint32 {
	if x != nil {
		return x.Startx
	}
	return 0
}

func (x *TvCell) GetStarty() uint32 {
	if x != nil {
		return x.Starty
	}
	return 0
}

func (x *TvCell) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *TvCell) GetHight() uint32 {
	if x != nil {
		return x.Hight
	}
	return 0
}

type TvCellList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tvcell []*TvCell `protobuf:"bytes,1,rep,name=tvcell,proto3" json:"tvcell,omitempty"`
}

func (x *TvCellList) Reset() {
	*x = TvCellList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TvCellList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TvCellList) ProtoMessage() {}

func (x *TvCellList) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TvCellList.ProtoReflect.Descriptor instead.
func (*TvCellList) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{124}
}

func (x *TvCellList) GetTvcell() []*TvCell {
	if x != nil {
		return x.Tvcell
	}
	return nil
}

type TvInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Base    *TvBasic  `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	Package uint32    `protobuf:"fixed32,2,opt,name=package,proto3" json:"package,omitempty"`
	Cellls  []*TvCell `protobuf:"bytes,3,rep,name=cellls,proto3" json:"cellls,omitempty"`
}

func (x *TvInfo) Reset() {
	*x = TvInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TvInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TvInfo) ProtoMessage() {}

func (x *TvInfo) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TvInfo.ProtoReflect.Descriptor instead.
func (*TvInfo) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{125}
}

func (x *TvInfo) GetBase() *TvBasic {
	if x != nil {
		return x.Base
	}
	return nil
}

func (x *TvInfo) GetPackage() uint32 {
	if x != nil {
		return x.Package
	}
	return 0
}

func (x *TvInfo) GetCellls() []*TvCell {
	if x != nil {
		return x.Cellls
	}
	return nil
}

type TvBack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     uint32 `protobuf:"fixed32,1,opt,name=id,proto3" json:"id,omitempty"`
	Exist  bool   `protobuf:"varint,2,opt,name=exist,proto3" json:"exist,omitempty"`
	State  uint32 `protobuf:"fixed32,3,opt,name=state,proto3" json:"state,omitempty"`
	Tvid   uint32 `protobuf:"fixed32,4,opt,name=tvid,proto3" json:"tvid,omitempty"`
	Name   string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Startx uint32 `protobuf:"fixed32,6,opt,name=startx,proto3" json:"startx,omitempty"`
	Starty uint32 `protobuf:"fixed32,7,opt,name=starty,proto3" json:"starty,omitempty"`
	Width  uint32 `protobuf:"fixed32,8,opt,name=width,proto3" json:"width,omitempty"`
	Height uint32 `protobuf:"fixed32,9,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *TvBack) Reset() {
	*x = TvBack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TvBack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TvBack) ProtoMessage() {}

func (x *TvBack) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TvBack.ProtoReflect.Descriptor instead.
func (*TvBack) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{126}
}

func (x *TvBack) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TvBack) GetExist() bool {
	if x != nil {
		return x.Exist
	}
	return false
}

func (x *TvBack) GetState() uint32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *TvBack) GetTvid() uint32 {
	if x != nil {
		return x.Tvid
	}
	return 0
}

func (x *TvBack) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TvBack) GetStartx() uint32 {
	if x != nil {
		return x.Startx
	}
	return 0
}

func (x *TvBack) GetStarty() uint32 {
	if x != nil {
		return x.Starty
	}
	return 0
}

func (x *TvBack) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *TvBack) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

type TvBackList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tvback []*TvBack `protobuf:"bytes,1,rep,name=tvback,proto3" json:"tvback,omitempty"`
}

func (x *TvBackList) Reset() {
	*x = TvBackList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TvBackList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TvBackList) ProtoMessage() {}

func (x *TvBackList) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TvBackList.ProtoReflect.Descriptor instead.
func (*TvBackList) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{127}
}

func (x *TvBackList) GetTvback() []*TvBack {
	if x != nil {
		return x.Tvback
	}
	return nil
}

type BackTrans struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   uint32 `protobuf:"fixed32,1,opt,name=id,proto3" json:"id,omitempty"`
	Tvid uint32 `protobuf:"fixed32,2,opt,name=tvid,proto3" json:"tvid,omitempty"`
	No   uint32 `protobuf:"fixed32,3,opt,name=no,proto3" json:"no,omitempty"`
	Url  string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *BackTrans) Reset() {
	*x = BackTrans{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackTrans) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackTrans) ProtoMessage() {}

func (x *BackTrans) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackTrans.ProtoReflect.Descriptor instead.
func (*BackTrans) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{128}
}

func (x *BackTrans) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *BackTrans) GetTvid() uint32 {
	if x != nil {
		return x.Tvid
	}
	return 0
}

func (x *BackTrans) GetNo() uint32 {
	if x != nil {
		return x.No
	}
	return 0
}

func (x *BackTrans) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type BackTransList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Backtrans []*BackTrans `protobuf:"bytes,1,rep,name=backtrans,proto3" json:"backtrans,omitempty"`
}

func (x *BackTransList) Reset() {
	*x = BackTransList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackTransList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackTransList) ProtoMessage() {}

func (x *BackTransList) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackTransList.ProtoReflect.Descriptor instead.
func (*BackTransList) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{129}
}

func (x *BackTransList) GetBacktrans() []*BackTrans {
	if x != nil {
		return x.Backtrans
	}
	return nil
}

type BackState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State uint32  `protobuf:"fixed32,1,opt,name=state,proto3" json:"state,omitempty"`
	Back  *TvBack `protobuf:"bytes,2,opt,name=back,proto3" json:"back,omitempty"`
}

func (x *BackState) Reset() {
	*x = BackState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackState) ProtoMessage() {}

func (x *BackState) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackState.ProtoReflect.Descriptor instead.
func (*BackState) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{130}
}

func (x *BackState) GetState() uint32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *BackState) GetBack() *TvBack {
	if x != nil {
		return x.Back
	}
	return nil
}

type OSD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        uint32 `protobuf:"fixed32,1,opt,name=id,proto3" json:"id,omitempty"`
	Visible   bool   `protobuf:"varint,2,opt,name=visible,proto3" json:"visible,omitempty"`
	Adaption  bool   `protobuf:"varint,3,opt,name=adaption,proto3" json:"adaption,omitempty"`
	Startx    uint32 `protobuf:"fixed32,4,opt,name=startx,proto3" json:"startx,omitempty"`
	Starty    uint32 `protobuf:"fixed32,5,opt,name=starty,proto3" json:"starty,omitempty"`
	Width     uint32 `protobuf:"fixed32,6,opt,name=width,proto3" json:"width,omitempty"`
	Height    uint32 `protobuf:"fixed32,7,opt,name=height,proto3" json:"height,omitempty"`
	Fontname  string `protobuf:"bytes,8,opt,name=fontname,proto3" json:"fontname,omitempty"`
	Fontstyle uint32 `protobuf:"fixed32,9,opt,name=fontstyle,proto3" json:"fontstyle,omitempty"`
	Fontsize  uint32 `protobuf:"fixed32,10,opt,name=fontsize,proto3" json:"fontsize,omitempty"`
	Fontform  uint32 `protobuf:"fixed32,11,opt,name=fontform,proto3" json:"fontform,omitempty"`
	Direction uint32 `protobuf:"fixed32,12,opt,name=direction,proto3" json:"direction,omitempty"`
	Fontclr   uint32 `protobuf:"fixed32,13,opt,name=fontclr,proto3" json:"fontclr,omitempty"`
	Context   string `protobuf:"bytes,14,opt,name=context,proto3" json:"context,omitempty"`
}

func (x *OSD) Reset() {
	*x = OSD{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OSD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OSD) ProtoMessage() {}

func (x *OSD) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OSD.ProtoReflect.Descriptor instead.
func (*OSD) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{131}
}

func (x *OSD) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OSD) GetVisible() bool {
	if x != nil {
		return x.Visible
	}
	return false
}

func (x *OSD) GetAdaption() bool {
	if x != nil {
		return x.Adaption
	}
	return false
}

func (x *OSD) GetStartx() uint32 {
	if x != nil {
		return x.Startx
	}
	return 0
}

func (x *OSD) GetStarty() uint32 {
	if x != nil {
		return x.Starty
	}
	return 0
}

func (x *OSD) GetWidth() uint32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *OSD) GetHeight() uint32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *OSD) GetFontname() string {
	if x != nil {
		return x.Fontname
	}
	return ""
}

func (x *OSD) GetFontstyle() uint32 {
	if x != nil {
		return x.Fontstyle
	}
	return 0
}

func (x *OSD) GetFontsize() uint32 {
	if x != nil {
		return x.Fontsize
	}
	return 0
}

func (x *OSD) GetFontform() uint32 {
	if x != nil {
		return x.Fontform
	}
	return 0
}

func (x *OSD) GetDirection() uint32 {
	if x != nil {
		return x.Direction
	}
	return 0
}

func (x *OSD) GetFontclr() uint32 {
	if x != nil {
		return x.Fontclr
	}
	return 0
}

func (x *OSD) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

type OSDList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  uint32 `protobuf:"fixed32,1,opt,name=id,proto3" json:"id,omitempty"`
	Osd []*OSD `protobuf:"bytes,2,rep,name=osd,proto3" json:"osd,omitempty"`
}

func (x *OSDList) Reset() {
	*x = OSDList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OSDList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OSDList) ProtoMessage() {}

func (x *OSDList) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OSDList.ProtoReflect.Descriptor instead.
func (*OSDList) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{132}
}

func (x *OSDList) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OSDList) GetOsd() []*OSD {
	if x != nil {
		return x.Osd
	}
	return nil
}

type OsdStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tvid  uint32 `protobuf:"fixed32,1,opt,name=tvid,proto3" json:"tvid,omitempty"`
	Id    uint32 `protobuf:"fixed32,2,opt,name=id,proto3" json:"id,omitempty"`
	State uint32 `protobuf:"fixed32,3,opt,name=state,proto3" json:"state,omitempty"`
	Exist uint32 `protobuf:"fixed32,4,opt,name=exist,proto3" json:"exist,omitempty"`
}

func (x *OsdStatus) Reset() {
	*x = OsdStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OsdStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OsdStatus) ProtoMessage() {}

func (x *OsdStatus) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OsdStatus.ProtoReflect.Descriptor instead.
func (*OsdStatus) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{133}
}

func (x *OsdStatus) GetTvid() uint32 {
	if x != nil {
		return x.Tvid
	}
	return 0
}

func (x *OsdStatus) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OsdStatus) GetState() uint32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *OsdStatus) GetExist() uint32 {
	if x != nil {
		return x.Exist
	}
	return 0
}

type OsdStatusList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Osdstatus []*OsdStatus `protobuf:"bytes,1,rep,name=osdstatus,proto3" json:"osdstatus,omitempty"`
}

func (x *OsdStatusList) Reset() {
	*x = OsdStatusList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OsdStatusList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OsdStatusList) ProtoMessage() {}

func (x *OsdStatusList) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OsdStatusList.ProtoReflect.Descriptor instead.
func (*OsdStatusList) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{134}
}

func (x *OsdStatusList) GetOsdstatus() []*OsdStatus {
	if x != nil {
		return x.Osdstatus
	}
	return nil
}

type FileTrans struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip       string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port     uint32 `protobuf:"fixed32,2,opt,name=port,proto3" json:"port,omitempty"`
	Username string `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	Path     string `protobuf:"bytes,5,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *FileTrans) Reset() {
	*x = FileTrans{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileTrans) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileTrans) ProtoMessage() {}

func (x *FileTrans) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileTrans.ProtoReflect.Descriptor instead.
func (*FileTrans) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{135}
}

func (x *FileTrans) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *FileTrans) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *FileTrans) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *FileTrans) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *FileTrans) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type OsdFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tvid     uint32 `protobuf:"fixed32,1,opt,name=tvid,proto3" json:"tvid,omitempty"`
	Id       uint32 `protobuf:"fixed32,2,opt,name=id,proto3" json:"id,omitempty"`
	Filesize uint32 `protobuf:"fixed32,3,opt,name=filesize,proto3" json:"filesize,omitempty"`
	Checksum uint32 `protobuf:"fixed32,4,opt,name=checksum,proto3" json:"checksum,omitempty"`
}

func (x *OsdFile) Reset() {
	*x = OsdFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OsdFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OsdFile) ProtoMessage() {}

func (x *OsdFile) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OsdFile.ProtoReflect.Descriptor instead.
func (*OsdFile) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{136}
}

func (x *OsdFile) GetTvid() uint32 {
	if x != nil {
		return x.Tvid
	}
	return 0
}

func (x *OsdFile) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OsdFile) GetFilesize() uint32 {
	if x != nil {
		return x.Filesize
	}
	return 0
}

func (x *OsdFile) GetChecksum() uint32 {
	if x != nil {
		return x.Checksum
	}
	return 0
}

type OSDCtrl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id  uint32 `protobuf:"fixed32,1,opt,name=id,proto3" json:"id,omitempty"`
	Use bool   `protobuf:"varint,2,opt,name=use,proto3" json:"use,omitempty"`
}

func (x *OSDCtrl) Reset() {
	*x = OSDCtrl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OSDCtrl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OSDCtrl) ProtoMessage() {}

func (x *OSDCtrl) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OSDCtrl.ProtoReflect.Descriptor instead.
func (*OSDCtrl) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{137}
}

func (x *OSDCtrl) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OSDCtrl) GetUse() bool {
	if x != nil {
		return x.Use
	}
	return false
}

type TvState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State *ValueU32 `protobuf:"bytes,1,opt,name=state,proto3" json:"state,omitempty"`
	Base  *TvBasic  `protobuf:"bytes,2,opt,name=base,proto3" json:"base,omitempty"`
}

func (x *TvState) Reset() {
	*x = TvState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TvState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TvState) ProtoMessage() {}

func (x *TvState) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TvState.ProtoReflect.Descriptor instead.
func (*TvState) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{138}
}

func (x *TvState) GetState() *ValueU32 {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *TvState) GetBase() *TvBasic {
	if x != nil {
		return x.Base
	}
	return nil
}

type Login struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Pass string `protobuf:"bytes,2,opt,name=pass,proto3" json:"pass,omitempty"`
}

func (x *Login) Reset() {
	*x = Login{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Login) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Login) ProtoMessage() {}

func (x *Login) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Login.ProtoReflect.Descriptor instead.
func (*Login) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{139}
}

func (x *Login) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *Login) GetPass() string {
	if x != nil {
		return x.Pass
	}
	return ""
}

type LoginAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    uint32 `protobuf:"fixed32,1,opt,name=id,proto3" json:"id,omitempty"`
	Count uint32 `protobuf:"fixed32,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *LoginAck) Reset() {
	*x = LoginAck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginAck) ProtoMessage() {}

func (x *LoginAck) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginAck.ProtoReflect.Descriptor instead.
func (*LoginAck) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{140}
}

func (x *LoginAck) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *LoginAck) GetCount() uint32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type PlatSn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Platsn string `protobuf:"bytes,1,opt,name=platsn,proto3" json:"platsn,omitempty"`
	Type   int32  `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *PlatSn) Reset() {
	*x = PlatSn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlatSn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlatSn) ProtoMessage() {}

func (x *PlatSn) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlatSn.ProtoReflect.Descriptor instead.
func (*PlatSn) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{141}
}

func (x *PlatSn) GetPlatsn() string {
	if x != nil {
		return x.Platsn
	}
	return ""
}

func (x *PlatSn) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type Kdmid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KDMID string `protobuf:"bytes,1,opt,name=KDMID,proto3" json:"KDMID,omitempty"` //监控平台上各类资源ID
}

func (x *Kdmid) Reset() {
	*x = Kdmid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Kdmid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Kdmid) ProtoMessage() {}

func (x *Kdmid) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Kdmid.ProtoReflect.Descriptor instead.
func (*Kdmid) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{142}
}

func (x *Kdmid) GetKDMID() string {
	if x != nil {
		return x.KDMID
	}
	return ""
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint32 `protobuf:"fixed32,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Pass     string `protobuf:"bytes,3,opt,name=pass,proto3" json:"pass,omitempty"`
	Type     uint32 `protobuf:"fixed32,4,opt,name=type,proto3" json:"type,omitempty"`
	Online   int32  `protobuf:"varint,5,opt,name=online,proto3" json:"online,omitempty"`
	Islock   int32  `protobuf:"varint,6,opt,name=islock,proto3" json:"islock,omitempty"`
	Isuse    int32  `protobuf:"varint,7,opt,name=isuse,proto3" json:"isuse,omitempty"`
	Validity uint32 `protobuf:"fixed32,8,opt,name=validity,proto3" json:"validity,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{143}
}

func (x *User) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *User) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *User) GetPass() string {
	if x != nil {
		return x.Pass
	}
	return ""
}

func (x *User) GetType() uint32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *User) GetOnline() int32 {
	if x != nil {
		return x.Online
	}
	return 0
}

func (x *User) GetIslock() int32 {
	if x != nil {
		return x.Islock
	}
	return 0
}

func (x *User) GetIsuse() int32 {
	if x != nil {
		return x.Isuse
	}
	return 0
}

func (x *User) GetValidity() uint32 {
	if x != nil {
		return x.Validity
	}
	return 0
}

type UserRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type int32  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Id   uint32 `protobuf:"fixed32,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UserRes) Reset() {
	*x = UserRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRes) ProtoMessage() {}

func (x *UserRes) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRes.ProtoReflect.Descriptor instead.
func (*UserRes) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{144}
}

func (x *UserRes) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *UserRes) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type UserResList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userid uint32     `protobuf:"fixed32,1,opt,name=userid,proto3" json:"userid,omitempty"`
	Res    []*UserRes `protobuf:"bytes,2,rep,name=res,proto3" json:"res,omitempty"`
}

func (x *UserResList) Reset() {
	*x = UserResList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserResList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserResList) ProtoMessage() {}

func (x *UserResList) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserResList.ProtoReflect.Descriptor instead.
func (*UserResList) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{145}
}

func (x *UserResList) GetUserid() uint32 {
	if x != nil {
		return x.Userid
	}
	return 0
}

func (x *UserResList) GetRes() []*UserRes {
	if x != nil {
		return x.Res
	}
	return nil
}

type UserList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User []*User `protobuf:"bytes,1,rep,name=user,proto3" json:"user,omitempty"`
}

func (x *UserList) Reset() {
	*x = UserList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserList) ProtoMessage() {}

func (x *UserList) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserList.ProtoReflect.Descriptor instead.
func (*UserList) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{146}
}

func (x *UserList) GetUser() []*User {
	if x != nil {
		return x.User
	}
	return nil
}

type UserLockState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    uint32 `protobuf:"fixed32,1,opt,name=id,proto3" json:"id,omitempty"`
	State bool   `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *UserLockState) Reset() {
	*x = UserLockState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLockState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLockState) ProtoMessage() {}

func (x *UserLockState) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLockState.ProtoReflect.Descriptor instead.
func (*UserLockState) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{147}
}

func (x *UserLockState) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserLockState) GetState() bool {
	if x != nil {
		return x.State
	}
	return false
}

type UserState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User  *User     `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	State *ValueU32 `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *UserState) Reset() {
	*x = UserState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserState) ProtoMessage() {}

func (x *UserState) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserState.ProtoReflect.Descriptor instead.
func (*UserState) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{148}
}

func (x *UserState) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *UserState) GetState() *ValueU32 {
	if x != nil {
		return x.State
	}
	return nil
}

type UserStateList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userstate []*UserState `protobuf:"bytes,1,rep,name=userstate,proto3" json:"userstate,omitempty"`
}

func (x *UserStateList) Reset() {
	*x = UserStateList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserStateList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserStateList) ProtoMessage() {}

func (x *UserStateList) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserStateList.ProtoReflect.Descriptor instead.
func (*UserStateList) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{149}
}

func (x *UserStateList) GetUserstate() []*UserState {
	if x != nil {
		return x.Userstate
	}
	return nil
}

type WinState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Window *Window `protobuf:"bytes,1,opt,name=window,proto3" json:"window,omitempty"`
	State  uint32  `protobuf:"fixed32,2,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *WinState) Reset() {
	*x = WinState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WinState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WinState) ProtoMessage() {}

func (x *WinState) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WinState.ProtoReflect.Descriptor instead.
func (*WinState) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{150}
}

func (x *WinState) GetWindow() *Window {
	if x != nil {
		return x.Window
	}
	return nil
}

func (x *WinState) GetState() uint32 {
	if x != nil {
		return x.State
	}
	return 0
}

type Subwindow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    uint32 `protobuf:"fixed32,1,opt,name=id,proto3" json:"id,omitempty"`
	Srcid uint32 `protobuf:"fixed32,2,opt,name=srcid,proto3" json:"srcid,omitempty"`
	Error string `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *Subwindow) Reset() {
	*x = Subwindow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subwindow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subwindow) ProtoMessage() {}

func (x *Subwindow) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subwindow.ProtoReflect.Descriptor instead.
func (*Subwindow) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{151}
}

func (x *Subwindow) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Subwindow) GetSrcid() uint32 {
	if x != nil {
		return x.Srcid
	}
	return 0
}

func (x *Subwindow) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type MergeWnd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *Tswid       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Style     uint32       `protobuf:"fixed32,2,opt,name=style,proto3" json:"style,omitempty"`
	Subwindow []*Subwindow `protobuf:"bytes,3,rep,name=subwindow,proto3" json:"subwindow,omitempty"`
}

func (x *MergeWnd) Reset() {
	*x = MergeWnd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergeWnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeWnd) ProtoMessage() {}

func (x *MergeWnd) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeWnd.ProtoReflect.Descriptor instead.
func (*MergeWnd) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{152}
}

func (x *MergeWnd) GetId() *Tswid {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MergeWnd) GetStyle() uint32 {
	if x != nil {
		return x.Style
	}
	return 0
}

func (x *MergeWnd) GetSubwindow() []*Subwindow {
	if x != nil {
		return x.Subwindow
	}
	return nil
}

type MergeWnds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mergewnd []*MergeWnd `protobuf:"bytes,1,rep,name=mergewnd,proto3" json:"mergewnd,omitempty"`
}

func (x *MergeWnds) Reset() {
	*x = MergeWnds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergeWnds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeWnds) ProtoMessage() {}

func (x *MergeWnds) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeWnds.ProtoReflect.Descriptor instead.
func (*MergeWnds) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{153}
}

func (x *MergeWnds) GetMergewnd() []*MergeWnd {
	if x != nil {
		return x.Mergewnd
	}
	return nil
}

type Rect struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X uint32 `protobuf:"fixed32,1,opt,name=x,proto3" json:"x,omitempty"`
	Y uint32 `protobuf:"fixed32,2,opt,name=y,proto3" json:"y,omitempty"`
	W uint32 `protobuf:"fixed32,3,opt,name=w,proto3" json:"w,omitempty"`
	H uint32 `protobuf:"fixed32,4,opt,name=h,proto3" json:"h,omitempty"`
}

func (x *Rect) Reset() {
	*x = Rect{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rect) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rect) ProtoMessage() {}

func (x *Rect) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rect.ProtoReflect.Descriptor instead.
func (*Rect) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{154}
}

func (x *Rect) GetX() uint32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Rect) GetY() uint32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Rect) GetW() uint32 {
	if x != nil {
		return x.W
	}
	return 0
}

func (x *Rect) GetH() uint32 {
	if x != nil {
		return x.H
	}
	return 0
}

type Window struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      uint32 `protobuf:"fixed32,1,opt,name=id,proto3" json:"id,omitempty"`
	Sceneid uint32 `protobuf:"fixed32,2,opt,name=sceneid,proto3" json:"sceneid,omitempty"`
	Tvid    uint32 `protobuf:"fixed32,3,opt,name=tvid,proto3" json:"tvid,omitempty"`
	Srcid   uint32 `protobuf:"fixed32,4,opt,name=srcid,proto3" json:"srcid,omitempty"`
	Layout  *Rect  `protobuf:"bytes,5,opt,name=layout,proto3" json:"layout,omitempty"`
	Style   uint32 `protobuf:"fixed32,6,opt,name=style,proto3" json:"style,omitempty"`
	Audio   bool   `protobuf:"varint,7,opt,name=audio,proto3" json:"audio,omitempty"`
	Layer   uint32 `protobuf:"fixed32,8,opt,name=layer,proto3" json:"layer,omitempty"`
	Iscut   bool   `protobuf:"varint,9,opt,name=iscut,proto3" json:"iscut,omitempty"`
	Cut     *Rect  `protobuf:"bytes,10,opt,name=cut,proto3" json:"cut,omitempty"`
}

func (x *Window) Reset() {
	*x = Window{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Window) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Window) ProtoMessage() {}

func (x *Window) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Window.ProtoReflect.Descriptor instead.
func (*Window) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{155}
}

func (x *Window) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Window) GetSceneid() uint32 {
	if x != nil {
		return x.Sceneid
	}
	return 0
}

func (x *Window) GetTvid() uint32 {
	if x != nil {
		return x.Tvid
	}
	return 0
}

func (x *Window) GetSrcid() uint32 {
	if x != nil {
		return x.Srcid
	}
	return 0
}

func (x *Window) GetLayout() *Rect {
	if x != nil {
		return x.Layout
	}
	return nil
}

func (x *Window) GetStyle() uint32 {
	if x != nil {
		return x.Style
	}
	return 0
}

func (x *Window) GetAudio() bool {
	if x != nil {
		return x.Audio
	}
	return false
}

func (x *Window) GetLayer() uint32 {
	if x != nil {
		return x.Layer
	}
	return 0
}

func (x *Window) GetIscut() bool {
	if x != nil {
		return x.Iscut
	}
	return false
}

func (x *Window) GetCut() *Rect {
	if x != nil {
		return x.Cut
	}
	return nil
}

type Windows struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Window []*Window `protobuf:"bytes,1,rep,name=window,proto3" json:"window,omitempty"`
}

func (x *Windows) Reset() {
	*x = Windows{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Windows) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Windows) ProtoMessage() {}

func (x *Windows) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Windows.ProtoReflect.Descriptor instead.
func (*Windows) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{156}
}

func (x *Windows) GetWindow() []*Window {
	if x != nil {
		return x.Window
	}
	return nil
}

type WndDesc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *Tswid `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Error string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *WndDesc) Reset() {
	*x = WndDesc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WndDesc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WndDesc) ProtoMessage() {}

func (x *WndDesc) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WndDesc.ProtoReflect.Descriptor instead.
func (*WndDesc) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{157}
}

func (x *WndDesc) GetId() *Tswid {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *WndDesc) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type Reorder struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      uint32 `protobuf:"fixed32,1,opt,name=id,proto3" json:"id,omitempty"`
	Sceneid uint32 `protobuf:"fixed32,2,opt,name=sceneid,proto3" json:"sceneid,omitempty"`
	Tvid    uint32 `protobuf:"fixed32,3,opt,name=tvid,proto3" json:"tvid,omitempty"`
	Order   uint32 `protobuf:"fixed32,4,opt,name=order,proto3" json:"order,omitempty"`
}

func (x *Reorder) Reset() {
	*x = Reorder{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reorder) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reorder) ProtoMessage() {}

func (x *Reorder) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reorder.ProtoReflect.Descriptor instead.
func (*Reorder) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{158}
}

func (x *Reorder) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Reorder) GetSceneid() uint32 {
	if x != nil {
		return x.Sceneid
	}
	return 0
}

func (x *Reorder) GetTvid() uint32 {
	if x != nil {
		return x.Tvid
	}
	return 0
}

func (x *Reorder) GetOrder() uint32 {
	if x != nil {
		return x.Order
	}
	return 0
}

type Ptz struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    uint32 `protobuf:"fixed32,1,opt,name=id,proto3" json:"id,omitempty"`
	Beid  *Tswid `protobuf:"bytes,2,opt,name=beid,proto3" json:"beid,omitempty"`
	Param uint32 `protobuf:"fixed32,3,opt,name=param,proto3" json:"param,omitempty"`
	Code  uint32 `protobuf:"fixed32,4,opt,name=code,proto3" json:"code,omitempty"`
	On    uint32 `protobuf:"fixed32,5,opt,name=on,proto3" json:"on,omitempty"`
}

func (x *Ptz) Reset() {
	*x = Ptz{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ptz) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ptz) ProtoMessage() {}

func (x *Ptz) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ptz.ProtoReflect.Descriptor instead.
func (*Ptz) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{159}
}

func (x *Ptz) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Ptz) GetBeid() *Tswid {
	if x != nil {
		return x.Beid
	}
	return nil
}

func (x *Ptz) GetParam() uint32 {
	if x != nil {
		return x.Param
	}
	return 0
}

func (x *Ptz) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Ptz) GetOn() uint32 {
	if x != nil {
		return x.On
	}
	return 0
}

type RealPlay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   uint32 `protobuf:"fixed32,1,opt,name=id,proto3" json:"id,omitempty"`
	Gbid string `protobuf:"bytes,2,opt,name=gbid,proto3" json:"gbid,omitempty"`
	Url  string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *RealPlay) Reset() {
	*x = RealPlay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealPlay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealPlay) ProtoMessage() {}

func (x *RealPlay) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealPlay.ProtoReflect.Descriptor instead.
func (*RealPlay) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{160}
}

func (x *RealPlay) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RealPlay) GetGbid() string {
	if x != nil {
		return x.Gbid
	}
	return ""
}

func (x *RealPlay) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type PcBdInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      uint32 `protobuf:"fixed32,1,opt,name=id,proto3" json:"id,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Slot    uint32 `protobuf:"fixed32,3,opt,name=slot,proto3" json:"slot,omitempty"`
	Online  uint32 `protobuf:"fixed32,4,opt,name=online,proto3" json:"online,omitempty"`
	Power   uint32 `protobuf:"fixed32,5,opt,name=power,proto3" json:"power,omitempty"`
	Runtime uint32 `protobuf:"fixed32,6,opt,name=runtime,proto3" json:"runtime,omitempty"`
}

func (x *PcBdInfo) Reset() {
	*x = PcBdInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PcBdInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PcBdInfo) ProtoMessage() {}

func (x *PcBdInfo) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PcBdInfo.ProtoReflect.Descriptor instead.
func (*PcBdInfo) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{161}
}

func (x *PcBdInfo) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PcBdInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PcBdInfo) GetSlot() uint32 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *PcBdInfo) GetOnline() uint32 {
	if x != nil {
		return x.Online
	}
	return 0
}

func (x *PcBdInfo) GetPower() uint32 {
	if x != nil {
		return x.Power
	}
	return 0
}

func (x *PcBdInfo) GetRuntime() uint32 {
	if x != nil {
		return x.Runtime
	}
	return 0
}

type PcBdInfoList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pcinfo []*PcBdInfo `protobuf:"bytes,1,rep,name=pcinfo,proto3" json:"pcinfo,omitempty"`
	Pcid   uint32      `protobuf:"fixed32,2,opt,name=pcid,proto3" json:"pcid,omitempty"`
}

func (x *PcBdInfoList) Reset() {
	*x = PcBdInfoList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msp_cnt_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PcBdInfoList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PcBdInfoList) ProtoMessage() {}

func (x *PcBdInfoList) ProtoReflect() protoreflect.Message {
	mi := &file_msp_cnt_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PcBdInfoList.ProtoReflect.Descriptor instead.
func (*PcBdInfoList) Descriptor() ([]byte, []int) {
	return file_msp_cnt_proto_rawDescGZIP(), []int{162}
}

func (x *PcBdInfoList) GetPcinfo() []*PcBdInfo {
	if x != nil {
		return x.Pcinfo
	}
	return nil
}

func (x *PcBdInfoList) GetPcid() uint32 {
	if x != nil {
		return x.Pcid
	}
	return 0
}

var File_msp_cnt_proto protoreflect.FileDescriptor

var file_msp_cnt_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6d, 0x73, 0x70, 0x2e, 0x63, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x6d, 0x73, 0x70, 0x2e, 0x6d, 0x6e, 0x74, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x52, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x12, 0x21, 0x0a, 0x04, 0x68, 0x65,
	0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x6d,
	0x6e, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x52, 0x04, 0x68, 0x65, 0x61, 0x64, 0x12, 0x28, 0x0a,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x84, 0x01, 0x0a, 0x04, 0x48, 0x65, 0x61, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x72, 0x69, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x72, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x72, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x07, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x07, 0x52, 0x06, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x1e,
	0x0a, 0x06, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x7d,
	0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x73, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x75, 0x62, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x73, 0x75, 0x62, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x07, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x78, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x07, 0x52, 0x04, 0x65, 0x78, 0x69, 0x64, 0x22, 0x20, 0x0a,
	0x08, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x33, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x58, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x43, 0x66, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x70, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x03, 0x6f, 0x70, 0x74, 0x22, 0x34, 0x0a, 0x06, 0x4e, 0x6f, 0x74,
	0x69, 0x66, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22,
	0x78, 0x0a, 0x08, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e,
	0x65, 0x78, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x06, 0x6e, 0x65, 0x78,
	0x74, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x07, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x69,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x06, 0x4e, 0x65,
	0x74, 0x43, 0x66, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x73, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x75, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x68,
	0x63, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x68, 0x63, 0x70, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x07, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x22, 0x2f, 0x0a, 0x0a, 0x4e, 0x65, 0x74, 0x43, 0x66, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x6e, 0x65, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x6d, 0x6e, 0x74, 0x2e, 0x4e, 0x65, 0x74, 0x43,
	0x66, 0x67, 0x52, 0x03, 0x6e, 0x65, 0x74, 0x22, 0x32, 0x0a, 0x06, 0x4c, 0x61, 0x6e, 0x63, 0x66,
	0x67, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x70, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x69, 0x70, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x70, 0x6f, 0x75, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x70, 0x6f, 0x75, 0x74, 0x22, 0x97, 0x02, 0x0a, 0x03,
	0x55, 0x6d, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x07, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x61, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x74, 0x73, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72,
	0x74, 0x73, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x70, 0x63, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x07, 0x52, 0x08, 0x69, 0x70, 0x63, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x74, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x07,
	0x52, 0x07, 0x6d, 0x74, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x6e,
	0x66, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x07, 0x52, 0x04, 0x63, 0x6f, 0x6e, 0x66, 0x12, 0x16, 0x0a,
	0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x07, 0x52, 0x06, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x29, 0x0a, 0x07, 0x55, 0x6d, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x1e, 0x0a, 0x03, 0x75, 0x6d, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x6d, 0x73, 0x70, 0x2e, 0x6d, 0x6e, 0x74, 0x2e, 0x55, 0x6d, 0x74, 0x52, 0x03, 0x75, 0x6d, 0x74,
	0x22, 0x30, 0x0a, 0x08, 0x55, 0x6d, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x22, 0x52, 0x0a, 0x06, 0x55, 0x6d, 0x74, 0x44, 0x65, 0x63, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x62, 0x6f, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x03, 0x62, 0x6f, 0x78, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x04, 0x73, 0x6c,
	0x6f, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x07,
	0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x35, 0x0a, 0x0a, 0x55, 0x6d, 0x74, 0x44, 0x65, 0x63,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x06, 0x75, 0x6d, 0x74, 0x64, 0x65, 0x63, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x6d, 0x6e, 0x74, 0x2e, 0x55,
	0x6d, 0x74, 0x44, 0x65, 0x63, 0x52, 0x06, 0x75, 0x6d, 0x74, 0x64, 0x65, 0x63, 0x22, 0x37, 0x0a,
	0x0c, 0x55, 0x6d, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d,
	0x73, 0x70, 0x2e, 0x6d, 0x6e, 0x74, 0x2e, 0x55, 0x6d, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x43, 0x0a, 0x07, 0x44, 0x65, 0x63, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x6f, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x03,
	0x62, 0x6f, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x33, 0x0a, 0x0b, 0x44,
	0x65, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x6d,
	0x6e, 0x74, 0x2e, 0x44, 0x65, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x22, 0x3f, 0x0a, 0x05, 0x52, 0x64, 0x42, 0x6f, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6d, 0x61, 0x69,
	0x6e, 0x22, 0x31, 0x0a, 0x09, 0x52, 0x64, 0x42, 0x6f, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24,
	0x0a, 0x05, 0x72, 0x64, 0x62, 0x6f, 0x78, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x6d, 0x73, 0x70, 0x2e, 0x6d, 0x6e, 0x74, 0x2e, 0x52, 0x64, 0x42, 0x6f, 0x78, 0x52, 0x05, 0x72,
	0x64, 0x62, 0x6f, 0x78, 0x22, 0xf4, 0x02, 0x0a, 0x06, 0x52, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6c, 0x62, 0x6f, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x04, 0x6c,
	0x62, 0x6f, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x73, 0x6c, 0x6f, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x6c, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x6c, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x06, 0x6c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x73, 0x6c, 0x6f, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x66, 0x73, 0x6c, 0x6f,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x07,
	0x52, 0x05, 0x66, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x07, 0x52, 0x06, 0x66, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x07, 0x52,
	0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x69, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x66, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x68, 0x79,
	0x62, 0x6f, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x07, 0x52, 0x06, 0x70, 0x68, 0x79, 0x62, 0x6f,
	0x78, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x68, 0x79, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x07, 0x70, 0x68, 0x79, 0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x68, 0x79, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x07, 0x52, 0x07, 0x70, 0x68,
	0x79, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x68, 0x79, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x07, 0x52, 0x07, 0x70, 0x68, 0x79, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x68, 0x79, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x08, 0x70, 0x68, 0x79, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x35, 0x0a, 0x0a, 0x52,
	0x64, 0x50, 0x6f, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x06, 0x72, 0x64, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x73, 0x70, 0x2e,
	0x6d, 0x6e, 0x74, 0x2e, 0x52, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x06, 0x72, 0x64, 0x70, 0x6f,
	0x72, 0x74, 0x22, 0x56, 0x0a, 0x08, 0x52, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x03, 0x73, 0x69, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x03, 0x64,
	0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x37, 0x0a, 0x0c, 0x52, 0x64,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x72, 0x64,
	0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x73, 0x70, 0x2e,
	0x6d, 0x6e, 0x74, 0x2e, 0x52, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x05, 0x72, 0x64,
	0x6f, 0x75, 0x74, 0x22, 0x32, 0x0a, 0x06, 0x42, 0x6f, 0x78, 0x45, 0x78, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x69, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x75, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6f, 0x75, 0x74, 0x69, 0x64, 0x22, 0x43, 0x0a, 0x0a, 0x42, 0x6f, 0x78, 0x45, 0x78,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x62, 0x6f, 0x78, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x6d, 0x6e, 0x74, 0x2e, 0x42, 0x6f, 0x78,
	0x45, 0x78, 0x74, 0x52, 0x03, 0x62, 0x6f, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x4d, 0x0a, 0x0c,
	0x52, 0x64, 0x50, 0x6f, 0x72, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x29, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x6d, 0x6e, 0x74, 0x2e, 0x52, 0x64, 0x50, 0x6f,
	0x72, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x82, 0x01, 0x0a, 0x07,
	0x50, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x06, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x03, 0x63, 0x68, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x6d, 0x6e, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4d, 0x65, 0x6d, 0x52, 0x03, 0x63, 0x68, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x07, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x30, 0x0a, 0x08, 0x50, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x04,
	0x70, 0x6c, 0x61, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x73, 0x70,
	0x2e, 0x6d, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x04, 0x70, 0x6c,
	0x61, 0x6e, 0x22, 0x30, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x73, 0x12,
	0x23, 0x0a, 0x03, 0x63, 0x68, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d,
	0x73, 0x70, 0x2e, 0x6d, 0x6e, 0x74, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x52,
	0x03, 0x63, 0x68, 0x6e, 0x22, 0x15, 0x0a, 0x03, 0x49, 0x64, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x07, 0x52, 0x02, 0x69, 0x64, 0x22, 0x54, 0x0a, 0x08, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x43, 0x68, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x02, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x6e, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x6e, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x07, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x33, 0x0a, 0x0c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x68, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x23, 0x0a, 0x03, 0x63, 0x68, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x6d, 0x6e, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x68,
	0x6e, 0x52, 0x03, 0x63, 0x68, 0x6e, 0x22, 0xd8, 0x01, 0x0a, 0x08, 0x43, 0x68, 0x6e, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x6e, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x07, 0x63, 0x68, 0x6e, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x08, 0x70, 0x6f, 0x72, 0x74, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6f,
	0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x6c, 0x12, 0x10, 0x0a, 0x03, 0x68, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x68, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x07, 0x52, 0x09, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x74, 0x79, 0x70,
	0x65, 0x22, 0xe0, 0x01, 0x0a, 0x07, 0x43, 0x68, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a,
	0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x73,
	0x70, 0x2e, 0x6d, 0x6e, 0x74, 0x2e, 0x43, 0x68, 0x6e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x04,
	0x62, 0x61, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x73, 0x77, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x04, 0x72, 0x65, 0x73, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x65, 0x73, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x04, 0x72, 0x65, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x09,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x07, 0x52,
	0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x6e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x76,
	0x73, 0x79, 0x6e, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x76, 0x73, 0x79,
	0x6e, 0x63, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x07, 0x52,
	0x03, 0x61, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x6e, 0x75, 0x6d, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x04, 0x61, 0x6e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x07, 0x52, 0x06, 0x61, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x61, 0x75, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x61, 0x75, 0x73, 0x65, 0x22, 0x31, 0x0a, 0x0b, 0x43, 0x68, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x03, 0x63, 0x68, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x6d, 0x6e, 0x74, 0x2e, 0x43, 0x68, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x03, 0x63, 0x68, 0x6e, 0x22, 0x62, 0x0a, 0x08, 0x43, 0x68, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x65, 0x78, 0x74, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x06, 0x6e, 0x65, 0x78, 0x74, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x64, 0x22, 0x4e, 0x0a, 0x0d, 0x43,
	0x68, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x05,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x73,
	0x70, 0x2e, 0x6d, 0x6e, 0x74, 0x2e, 0x43, 0x68, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x3d, 0x0a, 0x0c, 0x43,
	0x68, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x08, 0x63,
	0x68, 0x6e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x6d, 0x73, 0x70, 0x2e, 0x6d, 0x6e, 0x74, 0x2e, 0x43, 0x68, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x08, 0x63, 0x68, 0x6e, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x63, 0x0a, 0x0c, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4d, 0x65, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x2d, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x6d, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x6d, 0x6e, 0x74, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x65, 0x6d, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x6d, 0x65, 0x6e, 0x22,
	0x36, 0x0a, 0x0c, 0x43, 0x68, 0x6e, 0x4e, 0x65, 0x74, 0x45, 0x6e, 0x61, 0x6c, 0x62, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x4b, 0x0a, 0x10, 0x43, 0x68, 0x6e, 0x4e, 0x65,
	0x74, 0x45, 0x6e, 0x61, 0x6c, 0x62, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x0b, 0x63,
	0x68, 0x6e, 0x6e, 0x65, 0x74, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x6d, 0x6e, 0x74, 0x2e, 0x43, 0x68, 0x6e, 0x4e, 0x65,
	0x74, 0x45, 0x6e, 0x61, 0x6c, 0x62, 0x65, 0x52, 0x0b, 0x63, 0x68, 0x6e, 0x6e, 0x65, 0x74, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x22, 0x59, 0x0a, 0x07, 0x43, 0x68, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52,
	0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x64, 0x6d, 0x69, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x04, 0x68, 0x64, 0x6d, 0x69, 0x12, 0x12, 0x0a, 0x04, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x07, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x65, 0x22,
	0x2d, 0x0a, 0x07, 0x43, 0x68, 0x6e, 0x45, 0x64, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x64,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x64, 0x69, 0x64, 0x22, 0x82,
	0x01, 0x0a, 0x04, 0x45, 0x64, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x06, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x10, 0x0a,
	0x03, 0x63, 0x66, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x66, 0x67, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64,
	0x65, 0x73, 0x63, 0x22, 0x2d, 0x0a, 0x08, 0x45, 0x64, 0x69, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x21, 0x0a, 0x04, 0x65, 0x64, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x6d, 0x73, 0x70, 0x2e, 0x6d, 0x6e, 0x74, 0x2e, 0x45, 0x64, 0x69, 0x64, 0x52, 0x04, 0x65, 0x64,
	0x69, 0x64, 0x22, 0x78, 0x0a, 0x08, 0x55, 0x6d, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6d, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x05, 0x75, 0x6d, 0x74, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x22, 0x3d, 0x0a, 0x0c,
	0x55, 0x6d, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x08,
	0x75, 0x6d, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x6d, 0x6e, 0x74, 0x2e, 0x55, 0x6d, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x08, 0x75, 0x6d, 0x74, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0xe8, 0x01, 0x0a, 0x06,
	0x55, 0x6d, 0x74, 0x43, 0x68, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6d, 0x74, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x75, 0x6d, 0x74, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x67, 0x62, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x67, 0x62, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x72, 0x6d,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x1c, 0x0a, 0x09,
	0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61,
	0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x22, 0x35, 0x0a, 0x0a, 0x55, 0x6d, 0x74, 0x43, 0x68, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x06, 0x75, 0x6d, 0x74, 0x63, 0x68, 0x6e, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x6d, 0x6e, 0x74, 0x2e, 0x55,
	0x6d, 0x74, 0x43, 0x68, 0x6e, 0x52, 0x06, 0x75, 0x6d, 0x74, 0x63, 0x68, 0x6e, 0x22, 0x46, 0x0a,
	0x0b, 0x55, 0x6d, 0x74, 0x43, 0x68, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x03,
	0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x73, 0x70, 0x2e,
	0x6d, 0x6e, 0x74, 0x2e, 0x55, 0x6d, 0x74, 0x43, 0x68, 0x6e, 0x52, 0x03, 0x64, 0x65, 0x76, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x49, 0x0a, 0x0f, 0x55, 0x6d, 0x74, 0x43, 0x68, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x0b, 0x75, 0x6d, 0x74, 0x63,
	0x68, 0x6e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x6d, 0x73, 0x70, 0x2e, 0x6d, 0x6e, 0x74, 0x2e, 0x55, 0x6d, 0x74, 0x43, 0x68, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x0b, 0x75, 0x6d, 0x74, 0x63, 0x68, 0x6e, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x22, 0xd8, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6d, 0x43, 0x66, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x69, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x69, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x74, 0x6f, 0x70, 0x62, 0x69, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x07, 0x52, 0x08, 0x73,
	0x74, 0x6f, 0x70, 0x62, 0x69, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x07, 0x52, 0x06, 0x70, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x1a, 0x0a, 0x08, 0x62, 0x61, 0x75, 0x64, 0x72, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x08, 0x62, 0x61, 0x75, 0x64, 0x72, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x07, 0x52, 0x02, 0x69, 0x64, 0x22, 0x30, 0x0a, 0x06, 0x43,
	0x6f, 0x6d, 0x50, 0x74, 0x7a, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22, 0x2e, 0x0a,
	0x08, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xfa, 0x01,
	0x0a, 0x08, 0x44, 0x65, 0x76, 0x42, 0x61, 0x73, 0x69, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x62, 0x6f, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x03, 0x62, 0x6f, 0x78,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x04,
	0x73, 0x6c, 0x6f, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x68, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x03, 0x68, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x73, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x68, 0x77, 0x76, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x68, 0x77, 0x76, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6f, 0x66, 0x74, 0x76, 0x65,
	0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x6f, 0x66, 0x74, 0x76, 0x65, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x66, 0x77, 0x6e, 0x75, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x07, 0x52,
	0x05, 0x66, 0x77, 0x6e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0xae, 0x01, 0x0a, 0x07, 0x44,
	0x65, 0x76, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x73, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6f,
	0x72, 0x74, 0x63, 0x61, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x07, 0x52, 0x07, 0x70, 0x6f, 0x72,
	0x74, 0x63, 0x61, 0x70, 0x12, 0x25, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x6d, 0x6e, 0x74, 0x2e, 0x44, 0x65, 0x76,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x22, 0x2d, 0x0a, 0x07, 0x44,
	0x65, 0x76, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x6d, 0x6e, 0x74, 0x2e, 0x44, 0x65,
	0x76, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03, 0x64, 0x65, 0x76, 0x22, 0x25, 0x0a, 0x09, 0x53, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x43, 0x66, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x22, 0x83, 0x02, 0x0a, 0x09, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x65, 0x76, 0x12,
	0x0e, 0x0a, 0x02, 0x73, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x73, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x07, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x6d, 0x61, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d,
	0x61, 0x73, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x67, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x67, 0x77, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x72, 0x65, 0x67, 0x69, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65,
	0x67, 0x69, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x67, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x07, 0x72, 0x65, 0x67, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x6f, 0x66, 0x74, 0x76, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x6f, 0x66, 0x74, 0x76, 0x65, 0x72, 0x22, 0x35, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x44, 0x65, 0x76, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x6d, 0x6e, 0x74, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x65, 0x76, 0x52, 0x03, 0x64, 0x65, 0x76, 0x22, 0x40,
	0x0a, 0x06, 0x52, 0x65, 0x67, 0x44, 0x65, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65,
	0x67, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x72, 0x65, 0x67, 0x69, 0x70,
	0x22, 0x2f, 0x0a, 0x0a, 0x52, 0x65, 0x67, 0x44, 0x65, 0x76, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21,
	0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x73,
	0x70, 0x2e, 0x6d, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x67, 0x44, 0x65, 0x76, 0x52, 0x03, 0x64, 0x65,
	0x76, 0x22, 0x46, 0x0a, 0x06, 0x46, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x6e,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x02, 0x6e, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x6f, 0x66, 0x74, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x73, 0x6f, 0x66, 0x74, 0x76, 0x65, 0x72, 0x22, 0x39, 0x0a, 0x06, 0x46, 0x77, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x73, 0x6e, 0x12, 0x1f, 0x0a, 0x02, 0x66, 0x77, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x6d, 0x6e, 0x74, 0x2e, 0x46, 0x77, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x02, 0x66, 0x77, 0x22, 0x3e, 0x0a, 0x08, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x66, 0x67,
	0x12, 0x0e, 0x0a, 0x02, 0x73, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x73, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x4b, 0x0a, 0x0c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x66, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x68, 0x12, 0x27, 0x0a, 0x05, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x6d, 0x6e,
	0x74, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x66, 0x67, 0x52, 0x05, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x22, 0x33, 0x0a, 0x09, 0x42, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x65, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x04, 0x6d, 0x65,
	0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x4b, 0x0a, 0x09, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50,
	0x72, 0x6f, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x73, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x73, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x22, 0x4d, 0x0a, 0x0b, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x22, 0x70, 0x0a, 0x08, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x66,
	0x72, 0x6f, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x04, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x79, 0x6e, 0x63,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x09, 0x73, 0x79, 0x6e,
	0x63, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x79, 0x6e, 0x63, 0x70, 0x6f,
	0x6c, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x07, 0x52, 0x09, 0x73, 0x79, 0x6e, 0x63, 0x70,
	0x6f, 0x6c, 0x61, 0x72, 0x22, 0x47, 0x0a, 0x05, 0x4b, 0x76, 0x6d, 0x54, 0x76, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x6f, 0x75, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x6f, 0x75,
	0x74, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x72, 0x72, 0x61, 0x79, 0x69, 0x6e, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x07, 0x52, 0x07, 0x61, 0x72, 0x72, 0x61, 0x79, 0x69, 0x6e, 0x22, 0xc3, 0x01,
	0x0a, 0x07, 0x4b, 0x76, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x72, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x03, 0x72, 0x6f, 0x77, 0x12,
	0x10, 0x0a, 0x03, 0x63, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x07, 0x52, 0x03, 0x63, 0x6f,
	0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6e,
	0x75, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6d, 0x65, 0x6e, 0x75, 0x12, 0x28, 0x0a,
	0x07, 0x61, 0x72, 0x72, 0x61, 0x79, 0x74, 0x76, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x6d, 0x6e, 0x74, 0x2e, 0x4b, 0x76, 0x6d, 0x54, 0x76, 0x52, 0x07,
	0x61, 0x72, 0x72, 0x61, 0x79, 0x74, 0x76, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x72, 0x61, 0x79,
	0x73, 0x72, 0x63, 0x18, 0x08, 0x20, 0x03, 0x28, 0x07, 0x52, 0x08, 0x61, 0x72, 0x72, 0x61, 0x79,
	0x73, 0x72, 0x63, 0x22, 0x39, 0x0a, 0x0b, 0x4b, 0x76, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x2a, 0x0a, 0x07, 0x6b, 0x76, 0x6d, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x6d, 0x6e, 0x74, 0x2e, 0x4b, 0x76,
	0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x6b, 0x76, 0x6d, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x93,
	0x02, 0x0a, 0x0b, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x76, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x04, 0x74, 0x76,
	0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x63,
	0x61, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x07, 0x52, 0x08, 0x73, 0x63,
	0x61, 0x6e, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x07, 0x52, 0x06, 0x68, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x72, 0x65, 0x73, 0x68, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x05, 0x66, 0x72, 0x65, 0x73, 0x68, 0x12, 0x29, 0x0a, 0x06, 0x61, 0x64,
	0x76, 0x68, 0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x73, 0x70,
	0x2e, 0x6d, 0x6e, 0x74, 0x2e, 0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x52, 0x06, 0x61,
	0x64, 0x76, 0x68, 0x6f, 0x72, 0x12, 0x29, 0x0a, 0x06, 0x61, 0x64, 0x76, 0x76, 0x65, 0x72, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x6d, 0x6e, 0x74, 0x2e,
	0x41, 0x64, 0x76, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x52, 0x06, 0x61, 0x64, 0x76, 0x76, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x07, 0x52, 0x04,
	0x66, 0x6c, 0x61, 0x67, 0x22, 0x8d, 0x01, 0x0a, 0x07, 0x4b, 0x76, 0x6d, 0x50, 0x75, 0x73, 0x68,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x72, 0x74, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x72, 0x74, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x06, 0x73, 0x74, 0x61, 0x72, 0x74, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x07, 0x52,
	0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x07, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x75, 0x62, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x73,
	0x75, 0x62, 0x69, 0x64, 0x22, 0x55, 0x0a, 0x07, 0x50, 0x75, 0x73, 0x68, 0x43, 0x66, 0x67, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x05, 0x64, 0x73, 0x74, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x6d, 0x6e, 0x74, 0x2e, 0x4b, 0x76, 0x6d,
	0x50, 0x75, 0x73, 0x68, 0x52, 0x05, 0x64, 0x73, 0x74, 0x69, 0x64, 0x22, 0x62, 0x0a, 0x08, 0x4b,
	0x76, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6e, 0x75,
	0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x07, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6e, 0x75, 0x6d, 0x22,
	0x3d, 0x0a, 0x0c, 0x4b, 0x76, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x2d, 0x0a, 0x08, 0x6b, 0x76, 0x6d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x6d, 0x6e, 0x74, 0x2e, 0x4b, 0x76, 0x6d, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x08, 0x6b, 0x76, 0x6d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x72,
	0x0a, 0x0c, 0x4b, 0x76, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29,
	0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x6d, 0x6e, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x33,
	0x32, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x6d,
	0x6e, 0x74, 0x2e, 0x4b, 0x76, 0x6d, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x7d, 0x0a, 0x09, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12,
	0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52,
	0x08, 0x64, 0x61, 0x74, 0x61, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x07, 0x52, 0x04, 0x73, 0x69, 0x7a,
	0x65, 0x22, 0x8d, 0x01, 0x0a, 0x07, 0x4b, 0x76, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x75, 0x72, 0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x06, 0x63, 0x75, 0x72, 0x6e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x07,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x6d, 0x6e, 0x74,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x22, 0x49, 0x0a, 0x0d, 0x4b, 0x76, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x4e, 0x6f, 0x74, 0x69,
	0x66, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52,
	0x03, 0x6e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x6b, 0x76, 0x6d, 0x6e, 0x75, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x06, 0x6b, 0x76, 0x6d, 0x6e, 0x75, 0x6d, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x07, 0x52, 0x02, 0x69, 0x64, 0x22, 0x47, 0x0a, 0x0b,
	0x4b, 0x76, 0x6d, 0x43, 0x66, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x22, 0x0a, 0x03, 0x6b, 0x76, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x6d, 0x6e, 0x74, 0x2e, 0x4b, 0x76, 0x6d, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x03, 0x6b, 0x76, 0x6d, 0x22, 0xd2, 0x01, 0x0a, 0x08, 0x4b, 0x76, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x73, 0x74, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x64, 0x73, 0x74, 0x69, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x6b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x73, 0x6c, 0x69, 0x6e,
	0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x74, 0x72, 0x73, 0x6c, 0x69, 0x6e, 0x6b,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3d, 0x0a, 0x0c, 0x4b, 0x76,
	0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x08, 0x6b, 0x76,
	0x6d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d,
	0x73, 0x70, 0x2e, 0x6d, 0x6e, 0x74, 0x2e, 0x4b, 0x76, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x08, 0x6b, 0x76, 0x6d, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x08, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x50, 0x72, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07,
	0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x6e, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x07, 0x52, 0x05, 0x63, 0x68, 0x6e, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x0e, 0x0a, 0x02,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03,
	0x6f, 0x66, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x66, 0x66, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x61, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x61, 0x63,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x07, 0x52, 0x04,
	0x73, 0x6c, 0x6f, 0x74, 0x22, 0x1f, 0x0a, 0x07, 0x43, 0x68, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x68, 0x6e, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x07, 0x52, 0x05,
	0x63, 0x68, 0x6e, 0x69, 0x64, 0x22, 0x3a, 0x0a, 0x09, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x50, 0x72,
	0x6d, 0x73, 0x12, 0x2d, 0x0a, 0x08, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x70, 0x72, 0x6d, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x6d, 0x6e, 0x74, 0x2e, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x50, 0x72, 0x6d, 0x52, 0x08, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x70, 0x72,
	0x6d, 0x22, 0x6c, 0x0a, 0x06, 0x50, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x07, 0x52, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6e, 0x6e, 0x74, 0x6d, 0x6f, 0x64, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x07, 0x52, 0x08, 0x63, 0x6e, 0x6e, 0x74, 0x6d, 0x6f, 0x64, 0x65, 0x22,
	0x35, 0x0a, 0x0a, 0x50, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x0a,
	0x06, 0x70, 0x63, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x6d, 0x73, 0x70, 0x2e, 0x6d, 0x6e, 0x74, 0x2e, 0x50, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06,
	0x70, 0x63, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0x18, 0x0a, 0x06, 0x50, 0x63, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x07, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x58, 0x0a, 0x06, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x76, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x04, 0x74, 0x76,
	0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x6e, 0x64, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x06, 0x77, 0x6e, 0x64, 0x6e, 0x75, 0x6d, 0x22, 0x48, 0x0a, 0x07, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x65, 0x6e, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x65, 0x6e, 0x64, 0x12, 0x27, 0x0a, 0x06, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x73,
	0x70, 0x2e, 0x6d, 0x6e, 0x74, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x06, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x65, 0x22, 0x45, 0x0a, 0x05, 0x54, 0x73, 0x77, 0x69, 0x64, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x07,
	0x73, 0x63, 0x65, 0x6e, 0x65, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x76, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x04, 0x74, 0x76, 0x69, 0x64, 0x22, 0x75, 0x0a, 0x07, 0x50,
	0x6f, 0x6c, 0x6c, 0x50, 0x72, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6b, 0x65, 0x65, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x04, 0x6b, 0x65, 0x65, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73,
	0x73, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x73, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x22,
	0x0a, 0x04, 0x62, 0x65, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d,
	0x73, 0x70, 0x2e, 0x6d, 0x6e, 0x74, 0x2e, 0x54, 0x73, 0x77, 0x69, 0x64, 0x52, 0x04, 0x62, 0x65,
	0x69, 0x64, 0x22, 0x7e, 0x0a, 0x04, 0x50, 0x6f, 0x6c, 0x6c, 0x12, 0x2a, 0x0a, 0x07, 0x70, 0x6f,
	0x6c, 0x6c, 0x6d, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x73,
	0x70, 0x2e, 0x6d, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x4d, 0x65, 0x6d, 0x52, 0x07, 0x70,
	0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6d, 0x12, 0x26, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x6d, 0x6e, 0x74, 0x2e,
	0x50, 0x6f, 0x6c, 0x6c, 0x50, 0x72, 0x6d, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x22,
	0x0a, 0x04, 0x62, 0x65, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d,
	0x73, 0x70, 0x2e, 0x6d, 0x6e, 0x74, 0x2e, 0x54, 0x73, 0x77, 0x69, 0x64, 0x52, 0x04, 0x62, 0x65,
	0x69, 0x64, 0x22, 0x49, 0x0a, 0x07, 0x50, 0x6f, 0x6c, 0x6c, 0x4d, 0x65, 0x6d, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52,
	0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x36, 0x0a,
	0x08, 0x50, 0x6f, 0x6c, 0x6c, 0x4d, 0x65, 0x6d, 0x73, 0x12, 0x2a, 0x0a, 0x07, 0x70, 0x6f, 0x6c,
	0x6c, 0x6d, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x73, 0x70,
	0x2e, 0x6d, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x4d, 0x65, 0x6d, 0x52, 0x07, 0x70, 0x6f,
	0x6c, 0x6c, 0x6d, 0x65, 0x6d, 0x22, 0x5f, 0x0a, 0x0b, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x6d, 0x6e, 0x74, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x55, 0x33, 0x32, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a,
	0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x6d, 0x73, 0x70, 0x2e, 0x6d, 0x6e, 0x74, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x52, 0x06,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x65, 0x22, 0x55, 0x0a, 0x09, 0x50, 0x6f, 0x6c, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x04, 0x62, 0x65, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x6d, 0x6e,
	0x74, 0x2e, 0x54, 0x73, 0x77, 0x69, 0x64, 0x52, 0x04, 0x62, 0x65, 0x69, 0x64, 0x22, 0x3e, 0x0a,
	0x0a, 0x50, 0x6f, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x09, 0x70,
	0x6f, 0x6c, 0x6c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x6d, 0x6e, 0x74, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x09, 0x70, 0x6f, 0x6c, 0x6c, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x32, 0x0a,
	0x0a, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x46, 0x6f, 0x72, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x70, 0x22, 0x9a, 0x01, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x7a, 0x6f,
	0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x04, 0x79, 0x65,
	0x61, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x07, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f,
	0x75, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x07, 0x52, 0x04, 0x68, 0x6f, 0x75, 0x72, 0x12, 0x16,
	0x0a, 0x06, 0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x07, 0x52, 0x06,
	0x6d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x07, 0x52, 0x06, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x22, 0x32,
	0x0a, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6f, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6f,
	0x70, 0x74, 0x22, 0xbe, 0x01, 0x0a, 0x0a, 0x53, 0x79, 0x73, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x6e, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x07, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x63,
	0x63, 0x61, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x52, 0x06, 0x65, 0x6e, 0x63, 0x63, 0x61,
	0x70, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x70,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x03, 0x28, 0x07, 0x52, 0x07, 0x65, 0x78, 0x70, 0x64,
	0x61, 0x74, 0x61, 0x22, 0x58, 0x0a, 0x0c, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x66, 0x66, 0x65, 0x63, 0x64, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x08, 0x65, 0x66, 0x66, 0x65, 0x63, 0x64, 0x75, 0x65, 0x22, 0x43, 0x0a,
	0x10, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x2f, 0x0a, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x6d, 0x6e, 0x74, 0x2e, 0x4c, 0x69, 0x63,
	0x65, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e,
	0x63, 0x65, 0x22, 0x60, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x04, 0x73, 0x69,
	0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x70, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x07, 0x52,
	0x03, 0x6f, 0x70, 0x74, 0x22, 0x5a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x62, 0x6f, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x03, 0x62,
	0x6f, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07,
	0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73,
	0x75, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x69, 0x73, 0x75, 0x73, 0x65,
	0x22, 0x9c, 0x01, 0x0a, 0x07, 0x52, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x76, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x04,
	0x74, 0x76, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x07, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73,
	0x12, 0x2d, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x6d, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22,
	0x36, 0x0a, 0x08, 0x52, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x07, 0x72,
	0x65, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d,
	0x73, 0x70, 0x2e, 0x6d, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x52, 0x07,
	0x72, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x22, 0x78, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x6f, 0x64,
	0x65, 0x72, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x62,
	0x6f, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x03, 0x62, 0x6f, 0x78, 0x12, 0x12, 0x0a,
	0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x04, 0x73, 0x6c, 0x6f,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x6f, 0x72, 0x74, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x07, 0x70, 0x6f, 0x72, 0x74, 0x6e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x22, 0x4a, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x61, 0x72,
	0x64, 0x73, 0x12, 0x39, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61,
	0x72, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x6d,
	0x6e, 0x74, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x52,
	0x0c, 0x72, 0x65, 0x63, 0x6f, 0x64, 0x65, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x22, 0x8c, 0x02,
	0x0a, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6d,
	0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6d, 0x73, 0x70, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x73, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x6f, 0x78, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x07, 0x52, 0x03, 0x62, 0x6f, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x07,
	0x52, 0x06, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x07, 0x52, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x3a, 0x0a, 0x09,
	0x50, 0x6c, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x2d, 0x0a, 0x08, 0x70, 0x6c, 0x61,
	0x74, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x73,
	0x70, 0x2e, 0x6d, 0x6e, 0x74, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08,
	0x70, 0x6c, 0x61, 0x74, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xaa, 0x01, 0x0a, 0x08, 0x43, 0x61, 0x73,
	0x63, 0x43, 0x68, 0x6e, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x6f, 0x78, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x03, 0x62, 0x6f, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x07, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x62, 0x6f, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x04, 0x63, 0x62, 0x6f, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x73, 0x6c, 0x6f, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x63, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x63, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x63, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x63, 0x69, 0x70, 0x22, 0x3a, 0x0a, 0x09, 0x43, 0x61, 0x73, 0x63, 0x43, 0x68, 0x6e,
	0x6c, 0x73, 0x12, 0x2d, 0x0a, 0x08, 0x63, 0x61, 0x73, 0x63, 0x63, 0x68, 0x6e, 0x6c, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x6d, 0x6e, 0x74, 0x2e, 0x43,
	0x61, 0x73, 0x63, 0x43, 0x68, 0x6e, 0x6c, 0x52, 0x08, 0x63, 0x61, 0x73, 0x63, 0x63, 0x68, 0x6e,
	0x6c, 0x22, 0x42, 0x0a, 0x08, 0x43, 0x61, 0x73, 0x63, 0x50, 0x69, 0x70, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x73, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x73, 0x6e, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x4e, 0x0a, 0x0b, 0x43, 0x61, 0x73, 0x68, 0x43, 0x68, 0x6e,
	0x6c, 0x50, 0x72, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x03, 0x6f, 0x70, 0x74, 0x12, 0x2d, 0x0a, 0x08, 0x63, 0x61, 0x73, 0x63, 0x63, 0x68,
	0x6e, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x6d,
	0x6e, 0x74, 0x2e, 0x43, 0x61, 0x73, 0x63, 0x43, 0x68, 0x6e, 0x6c, 0x52, 0x08, 0x63, 0x61, 0x73,
	0x63, 0x63, 0x68, 0x6e, 0x6c, 0x22, 0xd7, 0x01, 0x0a, 0x07, 0x54, 0x76, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x76, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x03, 0x6b, 0x76, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x07, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x72,
	0x6f, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x07, 0x52, 0x03, 0x72, 0x6f, 0x77, 0x12, 0x10, 0x0a,
	0x03, 0x63, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x07, 0x52, 0x03, 0x63, 0x6f, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x07, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x65, 0x6c, 0x6c, 0x6e, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x07, 0x52, 0x07,
	0x63, 0x65, 0x6c, 0x6c, 0x6e, 0x75, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x61, 0x63, 0x6b, 0x69,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x07, 0x52, 0x06, 0x62, 0x61, 0x63, 0x6b, 0x69, 0x64, 0x22,
	0x34, 0x0a, 0x06, 0x54, 0x76, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x07, 0x74, 0x76, 0x62,
	0x61, 0x73, 0x69, 0x63, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x73, 0x70,
	0x2e, 0x6d, 0x6e, 0x74, 0x2e, 0x54, 0x76, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x07, 0x74, 0x76,
	0x62, 0x61, 0x73, 0x69, 0x63, 0x22, 0x8a, 0x01, 0x0a, 0x06, 0x54, 0x76, 0x43, 0x65, 0x6c, 0x6c,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x68, 0x6e, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52,
	0x05, 0x63, 0x68, 0x6e, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x72, 0x74, 0x78,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x06, 0x73, 0x74, 0x61, 0x72, 0x74, 0x78, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x72, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x07, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05,
	0x68, 0x69, 0x67, 0x68, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x68, 0x69, 0x67,
	0x68, 0x74, 0x22, 0x35, 0x0a, 0x0a, 0x54, 0x76, 0x43, 0x65, 0x6c, 0x6c, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x27, 0x0a, 0x06, 0x74, 0x76, 0x63, 0x65, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x6d, 0x6e, 0x74, 0x2e, 0x54, 0x76, 0x43, 0x65, 0x6c,
	0x6c, 0x52, 0x06, 0x74, 0x76, 0x63, 0x65, 0x6c, 0x6c, 0x22, 0x71, 0x0a, 0x06, 0x54, 0x76, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x24, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x6d, 0x6e, 0x74, 0x2e, 0x54, 0x76, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x07, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x63, 0x65, 0x6c, 0x6c, 0x6c, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x6d, 0x6e, 0x74, 0x2e, 0x54, 0x76,
	0x43, 0x65, 0x6c, 0x6c, 0x52, 0x06, 0x63, 0x65, 0x6c, 0x6c, 0x6c, 0x73, 0x22, 0xca, 0x01, 0x0a,
	0x06, 0x54, 0x76, 0x42, 0x61, 0x63, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x78, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x76, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x04, 0x74, 0x76, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x07, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x72, 0x74, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x06, 0x73, 0x74, 0x61, 0x72, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x35, 0x0a, 0x0a, 0x54, 0x76, 0x42,
	0x61, 0x63, 0x6b, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x06, 0x74, 0x76, 0x62, 0x61, 0x63,
	0x6b, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x6d, 0x6e,
	0x74, 0x2e, 0x54, 0x76, 0x42, 0x61, 0x63, 0x6b, 0x52, 0x06, 0x74, 0x76, 0x62, 0x61, 0x63, 0x6b,
	0x22, 0x51, 0x0a, 0x09, 0x42, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x76, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x04, 0x74, 0x76, 0x69,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x02, 0x6e,
	0x6f, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x22, 0x41, 0x0a, 0x0d, 0x42, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x09, 0x62, 0x61, 0x63, 0x6b, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x6d, 0x6e,
	0x74, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x52, 0x09, 0x62, 0x61, 0x63,
	0x6b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x22, 0x46, 0x0a, 0x09, 0x42, 0x61, 0x63, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x62, 0x61, 0x63,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x6d, 0x6e,
	0x74, 0x2e, 0x54, 0x76, 0x42, 0x61, 0x63, 0x6b, 0x52, 0x04, 0x62, 0x61, 0x63, 0x6b, 0x22, 0xed,
	0x02, 0x0a, 0x03, 0x4f, 0x53, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x61, 0x64, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x61, 0x64, 0x61, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x07, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x72, 0x74, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x06, 0x73, 0x74, 0x61, 0x72, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6f,
	0x6e, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6f,
	0x6e, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x6f, 0x6e, 0x74, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x07, 0x52, 0x09, 0x66, 0x6f, 0x6e, 0x74, 0x73,
	0x74, 0x79, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6f, 0x6e, 0x74, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x07, 0x52, 0x08, 0x66, 0x6f, 0x6e, 0x74, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6f, 0x6e, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x08, 0x66, 0x6f, 0x6e, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1c, 0x0a, 0x09,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x07, 0x52,
	0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6f,
	0x6e, 0x74, 0x63, 0x6c, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x07, 0x52, 0x07, 0x66, 0x6f, 0x6e,
	0x74, 0x63, 0x6c, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x39,
	0x0a, 0x07, 0x4f, 0x53, 0x44, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x03, 0x6f, 0x73, 0x64,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x6d, 0x6e, 0x74,
	0x2e, 0x4f, 0x53, 0x44, 0x52, 0x03, 0x6f, 0x73, 0x64, 0x22, 0x5b, 0x0a, 0x09, 0x4f, 0x73, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x76, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x04, 0x74, 0x76, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x78, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x07, 0x52,
	0x05, 0x65, 0x78, 0x69, 0x73, 0x74, 0x22, 0x41, 0x0a, 0x0d, 0x4f, 0x73, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x09, 0x6f, 0x73, 0x64, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x73, 0x70,
	0x2e, 0x6d, 0x6e, 0x74, 0x2e, 0x4f, 0x73, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09,
	0x6f, 0x73, 0x64, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x7b, 0x0a, 0x09, 0x46, 0x69, 0x6c,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x65, 0x0a, 0x07, 0x4f, 0x73, 0x64, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x76, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52,
	0x04, 0x74, 0x76, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x69, 0x7a,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x08, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x75, 0x6d, 0x22, 0x2b, 0x0a,
	0x07, 0x4f, 0x53, 0x44, 0x43, 0x74, 0x72, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x73, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x75, 0x73, 0x65, 0x22, 0x58, 0x0a, 0x07, 0x54, 0x76,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x6d, 0x6e, 0x74, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x55, 0x33, 0x32, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x24,
	0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d,
	0x73, 0x70, 0x2e, 0x6d, 0x6e, 0x74, 0x2e, 0x54, 0x76, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x04,
	0x62, 0x61, 0x73, 0x65, 0x22, 0x2f, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x61, 0x73, 0x73, 0x22, 0x30, 0x0a, 0x08, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x41, 0x63,
	0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07,
	0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x34, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x74, 0x53,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x74, 0x73, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x74, 0x73, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x1d, 0x0a,
	0x05, 0x4b, 0x64, 0x6d, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4b, 0x44, 0x4d, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4b, 0x44, 0x4d, 0x49, 0x44, 0x22, 0xb4, 0x01, 0x0a,
	0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x73,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x73, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x07, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x6c,
	0x6f, 0x63, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x73, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x75, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x69, 0x73, 0x75, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x07, 0x52, 0x08, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x69, 0x74, 0x79, 0x22, 0x2d, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x49, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x03, 0x72, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x6d, 0x6e, 0x74,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x52, 0x03, 0x72, 0x65, 0x73, 0x22, 0x2d, 0x0a,
	0x08, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x6d, 0x6e,
	0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x35, 0x0a, 0x0d,
	0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x22, 0x57, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x21, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x6d, 0x6e, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x6d, 0x6e, 0x74, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x55, 0x33, 0x32, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x41, 0x0a, 0x0d,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x6d, 0x6e, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22,
	0x49, 0x0a, 0x08, 0x57, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x77,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x73,
	0x70, 0x2e, 0x6d, 0x6e, 0x74, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x52, 0x06, 0x77, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x47, 0x0a, 0x09, 0x53, 0x75,
	0x62, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x72, 0x63, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x73, 0x72, 0x63, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0x72, 0x0a, 0x08, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x57, 0x6e, 0x64, 0x12,
	0x1e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x73,
	0x70, 0x2e, 0x6d, 0x6e, 0x74, 0x2e, 0x54, 0x73, 0x77, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05,
	0x73, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x77, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x6d,
	0x6e, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x52, 0x09, 0x73, 0x75,
	0x62, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x22, 0x3a, 0x0a, 0x09, 0x4d, 0x65, 0x72, 0x67, 0x65,
	0x57, 0x6e, 0x64, 0x73, 0x12, 0x2d, 0x0a, 0x08, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x77, 0x6e, 0x64,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x6d, 0x6e, 0x74,
	0x2e, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x57, 0x6e, 0x64, 0x52, 0x08, 0x6d, 0x65, 0x72, 0x67, 0x65,
	0x77, 0x6e, 0x64, 0x22, 0x3e, 0x0a, 0x04, 0x52, 0x65, 0x63, 0x74, 0x12, 0x0c, 0x0a, 0x01, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x77, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x01, 0x77, 0x12, 0x0c, 0x0a, 0x01, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x07,
	0x52, 0x01, 0x68, 0x22, 0xfc, 0x01, 0x0a, 0x06, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x07, 0x52,
	0x07, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x76, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x04, 0x74, 0x76, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x72, 0x63, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x73, 0x72, 0x63,
	0x69, 0x64, 0x12, 0x25, 0x0a, 0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x6d, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x63,
	0x74, 0x52, 0x06, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x61, 0x75, 0x64, 0x69, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x73, 0x63, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x63, 0x75,
	0x74, 0x12, 0x1f, 0x0a, 0x03, 0x63, 0x75, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x6d, 0x73, 0x70, 0x2e, 0x6d, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x63, 0x74, 0x52, 0x03, 0x63,
	0x75, 0x74, 0x22, 0x32, 0x0a, 0x07, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x12, 0x27, 0x0a,
	0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x6d, 0x73, 0x70, 0x2e, 0x6d, 0x6e, 0x74, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x52, 0x06,
	0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x22, 0x3f, 0x0a, 0x07, 0x57, 0x6e, 0x64, 0x44, 0x65, 0x73,
	0x63, 0x12, 0x1e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x6d, 0x73, 0x70, 0x2e, 0x6d, 0x6e, 0x74, 0x2e, 0x54, 0x73, 0x77, 0x69, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x5d, 0x0a, 0x07, 0x52, 0x65, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x07, 0x73, 0x63, 0x65, 0x6e, 0x65, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x76, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x04, 0x74, 0x76, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x07, 0x52,
	0x05, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x22, 0x73, 0x0a, 0x03, 0x50, 0x74, 0x7a, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a,
	0x04, 0x62, 0x65, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x73,
	0x70, 0x2e, 0x6d, 0x6e, 0x74, 0x2e, 0x54, 0x73, 0x77, 0x69, 0x64, 0x52, 0x04, 0x62, 0x65, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07,
	0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x07, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x07, 0x52, 0x02, 0x6f, 0x6e, 0x22, 0x40, 0x0a, 0x08, 0x52,
	0x65, 0x61, 0x6c, 0x50, 0x6c, 0x61, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x62, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x67, 0x62, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x75,
	0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x8a, 0x01,
	0x0a, 0x08, 0x50, 0x63, 0x42, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x04, 0x73, 0x6c,
	0x6f, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x07, 0x52, 0x06, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x07, 0x52, 0x05, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x07, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x4d, 0x0a, 0x0c, 0x50, 0x63,
	0x42, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x06, 0x70, 0x63,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x73, 0x70,
	0x2e, 0x6d, 0x6e, 0x74, 0x2e, 0x50, 0x63, 0x42, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x70,
	0x63, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x63, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x07, 0x52, 0x04, 0x70, 0x63, 0x69, 0x64, 0x2a, 0x3b, 0x0a, 0x07, 0x45, 0x44, 0x41,
	0x54, 0x41, 0x53, 0x54, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x44, 0x54, 0x4f, 0x4b, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x45, 0x44, 0x54, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x45, 0x44, 0x54, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x44,
	0x54, 0x4d, 0x53, 0x47, 0x10, 0x03, 0x2a, 0xb5, 0x01, 0x0a, 0x08, 0x45, 0x44, 0x45, 0x56, 0x54,
	0x59, 0x50, 0x45, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x44, 0x45, 0x56, 0x41, 0x4c, 0x4c, 0x10, 0x00,
	0x12, 0x0c, 0x0a, 0x08, 0x45, 0x44, 0x45, 0x56, 0x41, 0x53, 0x56, 0x52, 0x10, 0x02, 0x12, 0x0a,
	0x0a, 0x06, 0x45, 0x44, 0x45, 0x56, 0x49, 0x4e, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x44,
	0x45, 0x56, 0x4f, 0x55, 0x54, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x44, 0x45, 0x56, 0x42,
	0x4f, 0x58, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x44, 0x45, 0x56, 0x54, 0x58, 0x10, 0x07,
	0x12, 0x0a, 0x0a, 0x06, 0x45, 0x44, 0x45, 0x56, 0x52, 0x58, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07,
	0x45, 0x44, 0x45, 0x56, 0x44, 0x45, 0x43, 0x10, 0x09, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x44, 0x45,
	0x56, 0x56, 0x53, 0x56, 0x52, 0x10, 0x0f, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x44, 0x45, 0x56, 0x4e,
	0x4d, 0x43, 0x10, 0x10, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x44, 0x45, 0x56, 0x31, 0x38, 0x33, 0x37,
	0x10, 0x11, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x44, 0x45, 0x56, 0x4d, 0x50, 0x55, 0x10, 0x12, 0x12,
	0x0d, 0x0a, 0x09, 0x45, 0x44, 0x45, 0x56, 0x44, 0x41, 0x4e, 0x54, 0x45, 0x10, 0x13, 0x2a, 0x42,
	0x0a, 0x06, 0x45, 0x4d, 0x4d, 0x45, 0x54, 0x48, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x4d, 0x52, 0x45,
	0x42, 0x4f, 0x4f, 0x54, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x4d, 0x52, 0x45, 0x53, 0x54,
	0x4f, 0x52, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x4d, 0x53, 0x45, 0x54, 0x42, 0x4f,
	0x58, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x4d, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45,
	0x10, 0x03, 0x2a, 0x73, 0x0a, 0x0a, 0x45, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x43, 0x45, 0x53, 0x54,
	0x12, 0x0c, 0x0a, 0x08, 0x45, 0x4c, 0x49, 0x43, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0d,
	0x0a, 0x07, 0x45, 0x4c, 0x49, 0x43, 0x4e, 0x4f, 0x54, 0x10, 0xfd, 0x9c, 0x01, 0x12, 0x0d, 0x0a,
	0x07, 0x45, 0x4c, 0x49, 0x43, 0x45, 0x58, 0x50, 0x10, 0xfe, 0x9c, 0x01, 0x12, 0x11, 0x0a, 0x0b,
	0x45, 0x4c, 0x49, 0x43, 0x54, 0x59, 0x50, 0x45, 0x45, 0x52, 0x52, 0x10, 0xff, 0x9c, 0x01, 0x12,
	0x12, 0x0a, 0x0c, 0x45, 0x4c, 0x49, 0x43, 0x45, 0x48, 0x4f, 0x53, 0x54, 0x45, 0x52, 0x52, 0x10,
	0x80, 0x9d, 0x01, 0x12, 0x12, 0x0a, 0x0c, 0x45, 0x4c, 0x49, 0x43, 0x45, 0x44, 0x41, 0x54, 0x41,
	0x45, 0x52, 0x52, 0x10, 0x81, 0x9d, 0x01, 0x2a, 0x70, 0x0a, 0x0b, 0x45, 0x4c, 0x49, 0x43, 0x45,
	0x4e, 0x43, 0x45, 0x42, 0x49, 0x54, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x4c, 0x49, 0x43, 0x42, 0x49,
	0x54, 0x4b, 0x56, 0x4d, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x4c, 0x49, 0x43, 0x42, 0x49,
	0x54, 0x56, 0x49, 0x44, 0x45, 0x4f, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x4c, 0x49, 0x43,
	0x42, 0x49, 0x54, 0x41, 0x55, 0x44, 0x49, 0x4f, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x4c,
	0x49, 0x43, 0x42, 0x49, 0x54, 0x52, 0x45, 0x53, 0x54, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x45,
	0x4c, 0x49, 0x43, 0x42, 0x49, 0x54, 0x5a, 0x4b, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x4c,
	0x49, 0x43, 0x42, 0x49, 0x54, 0x56, 0x53, 0x10, 0x05, 0x2a, 0x5d, 0x0a, 0x06, 0x4f, 0x50, 0x43,
	0x4f, 0x44, 0x45, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x50, 0x54, 0x4f, 0x50, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x4f, 0x50, 0x42, 0x4f, 0x54, 0x54, 0x4f, 0x4d, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04,
	0x4f, 0x50, 0x55, 0x50, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x50, 0x44, 0x4f, 0x57, 0x4e,
	0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x50, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x04, 0x12, 0x0b,
	0x0a, 0x07, 0x4f, 0x50, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x4f,
	0x50, 0x43, 0x4c, 0x45, 0x41, 0x4e, 0x10, 0x06, 0x2a, 0x90, 0x02, 0x0a, 0x07, 0x50, 0x54, 0x5a,
	0x43, 0x4f, 0x44, 0x45, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x44, 0x45, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x5a, 0x4f, 0x4f, 0x4d, 0x4c, 0x41, 0x52, 0x47, 0x45, 0x52,
	0x10, 0x0b, 0x12, 0x0d, 0x0a, 0x09, 0x5a, 0x4f, 0x4f, 0x4d, 0x53, 0x4d, 0x41, 0x4c, 0x4c, 0x10,
	0x0c, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x4f, 0x43, 0x55, 0x53, 0x4e, 0x45, 0x41, 0x52, 0x10, 0x0d,
	0x12, 0x0c, 0x0a, 0x08, 0x46, 0x4f, 0x43, 0x55, 0x53, 0x46, 0x41, 0x52, 0x10, 0x0e, 0x12, 0x0f,
	0x0a, 0x0b, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x4c, 0x41, 0x52, 0x47, 0x45, 0x52, 0x10, 0x0f, 0x12,
	0x0e, 0x0a, 0x0a, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x53, 0x4d, 0x41, 0x4c, 0x4c, 0x10, 0x10, 0x12,
	0x0a, 0x0a, 0x06, 0x4d, 0x4f, 0x56, 0x45, 0x55, 0x50, 0x10, 0x15, 0x12, 0x0c, 0x0a, 0x08, 0x4d,
	0x4f, 0x56, 0x45, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x16, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x4f, 0x56,
	0x45, 0x4c, 0x45, 0x46, 0x54, 0x10, 0x17, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x4f, 0x56, 0x45, 0x52,
	0x49, 0x47, 0x48, 0x54, 0x10, 0x18, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x4f, 0x56, 0x45, 0x4c, 0x55,
	0x50, 0x10, 0x19, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x4f, 0x56, 0x45, 0x52, 0x55, 0x50, 0x10, 0x1a,
	0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x4f, 0x56, 0x45, 0x4c, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x1b, 0x12,
	0x0d, 0x0a, 0x09, 0x4d, 0x4f, 0x56, 0x45, 0x52, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x1c, 0x12, 0x0c,
	0x0a, 0x08, 0x4d, 0x4f, 0x56, 0x45, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x1d, 0x12, 0x0e, 0x0a, 0x0a,
	0x47, 0x4f, 0x54, 0x4f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x10, 0x27, 0x12, 0x0d, 0x0a, 0x09,
	0x53, 0x45, 0x54, 0x50, 0x52, 0x45, 0x53, 0x45, 0x54, 0x10, 0x28, 0x42, 0x1a, 0x5a, 0x18, 0x2e,
	0x2e, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_msp_cnt_proto_rawDescOnce sync.Once
	file_msp_cnt_proto_rawDescData = file_msp_cnt_proto_rawDesc
)

func file_msp_cnt_proto_rawDescGZIP() []byte {
	file_msp_cnt_proto_rawDescOnce.Do(func() {
		file_msp_cnt_proto_rawDescData = protoimpl.X.CompressGZIP(file_msp_cnt_proto_rawDescData)
	})
	return file_msp_cnt_proto_rawDescData
}

var file_msp_cnt_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_msp_cnt_proto_msgTypes = make([]protoimpl.MessageInfo, 163)
var file_msp_cnt_proto_goTypes = []interface{}{
	(EDATAST)(0),             // 0: msp.mnt.EDATAST
	(EDEVTYPE)(0),            // 1: msp.mnt.EDEVTYPE
	(EMMETH)(0),              // 2: msp.mnt.EMMETH
	(ELICENCEST)(0),          // 3: msp.mnt.ELICENCEST
	(ELICENCEBIT)(0),         // 4: msp.mnt.ELICENCEBIT
	(OPCODE)(0),              // 5: msp.mnt.OPCODE
	(PTZCODE)(0),             // 6: msp.mnt.PTZCODE
	(*Msg)(nil),              // 7: msp.mnt.Msg
	(*Head)(nil),             // 8: msp.mnt.Head
	(*String)(nil),           // 9: msp.mnt.String
	(*Query)(nil),            // 10: msp.mnt.Query
	(*ValueU32)(nil),         // 11: msp.mnt.ValueU32
	(*TransCfg)(nil),         // 12: msp.mnt.TransCfg
	(*Notify)(nil),           // 13: msp.mnt.Notify
	(*GroupMem)(nil),         // 14: msp.mnt.GroupMem
	(*NetCfg)(nil),           // 15: msp.mnt.NetCfg
	(*NetCfgList)(nil),       // 16: msp.mnt.NetCfgList
	(*Lancfg)(nil),           // 17: msp.mnt.Lancfg
	(*Umt)(nil),              // 18: msp.mnt.Umt
	(*UmtList)(nil),          // 19: msp.mnt.UmtList
	(*UmtState)(nil),         // 20: msp.mnt.UmtState
	(*UmtDec)(nil),           // 21: msp.mnt.UmtDec
	(*UmtDecList)(nil),       // 22: msp.mnt.UmtDecList
	(*UmtStateList)(nil),     // 23: msp.mnt.UmtStateList
	(*DecMode)(nil),          // 24: msp.mnt.DecMode
	(*DecModeList)(nil),      // 25: msp.mnt.DecModeList
	(*RdBox)(nil),            // 26: msp.mnt.RdBox
	(*RdBoxList)(nil),        // 27: msp.mnt.RdBoxList
	(*RdPort)(nil),           // 28: msp.mnt.RdPort
	(*RdPortList)(nil),       // 29: msp.mnt.RdPortList
	(*RdOutput)(nil),         // 30: msp.mnt.RdOutput
	(*RdOutputList)(nil),     // 31: msp.mnt.RdOutputList
	(*BoxExt)(nil),           // 32: msp.mnt.BoxExt
	(*BoxExtList)(nil),       // 33: msp.mnt.BoxExtList
	(*RdPortUpdate)(nil),     // 34: msp.mnt.RdPortUpdate
	(*PrePlan)(nil),          // 35: msp.mnt.PrePlan
	(*PrePlans)(nil),         // 36: msp.mnt.PrePlans
	(*GroupMems)(nil),        // 37: msp.mnt.GroupMems
	(*Ids)(nil),              // 38: msp.mnt.Ids
	(*QueryChn)(nil),         // 39: msp.mnt.QueryChn
	(*QueryChnList)(nil),     // 40: msp.mnt.QueryChnList
	(*ChnBasic)(nil),         // 41: msp.mnt.ChnBasic
	(*ChnInfo)(nil),          // 42: msp.mnt.ChnInfo
	(*ChnInfoList)(nil),      // 43: msp.mnt.ChnInfoList
	(*ChnGroup)(nil),         // 44: msp.mnt.ChnGroup
	(*ChnGroupState)(nil),    // 45: msp.mnt.ChnGroupState
	(*ChnGroupList)(nil),     // 46: msp.mnt.ChnGroupList
	(*GroupMemList)(nil),     // 47: msp.mnt.GroupMemList
	(*ChnNetEnalbe)(nil),     // 48: msp.mnt.ChnNetEnalbe
	(*ChnNetEnalbeList)(nil), // 49: msp.mnt.ChnNetEnalbeList
	(*ChnMode)(nil),          // 50: msp.mnt.ChnMode
	(*ChnEdid)(nil),          // 51: msp.mnt.ChnEdid
	(*Edid)(nil),             // 52: msp.mnt.Edid
	(*EdidList)(nil),         // 53: msp.mnt.EdidList
	(*UmtGroup)(nil),         // 54: msp.mnt.UmtGroup
	(*UmtGroupList)(nil),     // 55: msp.mnt.UmtGroupList
	(*UmtChn)(nil),           // 56: msp.mnt.UmtChn
	(*UmtChnList)(nil),       // 57: msp.mnt.UmtChnList
	(*UmtChnState)(nil),      // 58: msp.mnt.UmtChnState
	(*UmtChnStateList)(nil),  // 59: msp.mnt.UmtChnStateList
	(*ComCfg)(nil),           // 60: msp.mnt.ComCfg
	(*ComPtz)(nil),           // 61: msp.mnt.ComPtz
	(*Property)(nil),         // 62: msp.mnt.Property
	(*DevBasic)(nil),         // 63: msp.mnt.DevBasic
	(*DevInfo)(nil),          // 64: msp.mnt.DevInfo
	(*DevList)(nil),          // 65: msp.mnt.DevList
	(*SearchCfg)(nil),        // 66: msp.mnt.SearchCfg
	(*SearchDev)(nil),        // 67: msp.mnt.SearchDev
	(*SearchDevList)(nil),    // 68: msp.mnt.SearchDevList
	(*RegDev)(nil),           // 69: msp.mnt.RegDev
	(*RegDevList)(nil),       // 70: msp.mnt.RegDevList
	(*FwInfo)(nil),           // 71: msp.mnt.FwInfo
	(*FwList)(nil),           // 72: msp.mnt.FwList
	(*BatchCfg)(nil),         // 73: msp.mnt.BatchCfg
	(*BatchCfgList)(nil),     // 74: msp.mnt.BatchCfgList
	(*BatchInfo)(nil),        // 75: msp.mnt.BatchInfo
	(*BatchProg)(nil),        // 76: msp.mnt.BatchProg
	(*PackageInfo)(nil),      // 77: msp.mnt.PackageInfo
	(*Advanced)(nil),         // 78: msp.mnt.Advanced
	(*KvmTv)(nil),            // 79: msp.mnt.KvmTv
	(*KvmInfo)(nil),          // 80: msp.mnt.KvmInfo
	(*KvmInfoList)(nil),      // 81: msp.mnt.KvmInfoList
	(*MonitorInfo)(nil),      // 82: msp.mnt.MonitorInfo
	(*KvmPush)(nil),          // 83: msp.mnt.KvmPush
	(*PushCfg)(nil),          // 84: msp.mnt.PushCfg
	(*KvmGroup)(nil),         // 85: msp.mnt.KvmGroup
	(*KvmGroupList)(nil),     // 86: msp.mnt.KvmGroupList
	(*KvmGroupInfo)(nil),     // 87: msp.mnt.KvmGroupInfo
	(*FileParam)(nil),        // 88: msp.mnt.FileParam
	(*KvmFile)(nil),          // 89: msp.mnt.KvmFile
	(*KvmFileNotify)(nil),    // 90: msp.mnt.KvmFileNotify
	(*KvmCfgState)(nil),      // 91: msp.mnt.KvmCfgState
	(*KvmState)(nil),         // 92: msp.mnt.KvmState
	(*KvmStateList)(nil),     // 93: msp.mnt.KvmStateList
	(*PowerPrm)(nil),         // 94: msp.mnt.PowerPrm
	(*ChnList)(nil),          // 95: msp.mnt.ChnList
	(*PowerPrms)(nil),        // 96: msp.mnt.PowerPrms
	(*PcInfo)(nil),           // 97: msp.mnt.PcInfo
	(*PcInfoList)(nil),       // 98: msp.mnt.PcInfoList
	(*PcList)(nil),           // 99: msp.mnt.PcList
	(*Scheme)(nil),           // 100: msp.mnt.Scheme
	(*Schemes)(nil),          // 101: msp.mnt.Schemes
	(*Tswid)(nil),            // 102: msp.mnt.Tswid
	(*PollPrm)(nil),          // 103: msp.mnt.PollPrm
	(*Poll)(nil),             // 104: msp.mnt.Poll
	(*PollMem)(nil),          // 105: msp.mnt.PollMem
	(*PollMems)(nil),         // 106: msp.mnt.PollMems
	(*SchemeState)(nil),      // 107: msp.mnt.SchemeState
	(*PollState)(nil),        // 108: msp.mnt.PollState
	(*PollStates)(nil),       // 109: msp.mnt.PollStates
	(*FilterForm)(nil),       // 110: msp.mnt.FilterForm
	(*Time)(nil),             // 111: msp.mnt.Time
	(*AccessCode)(nil),       // 112: msp.mnt.AccessCode
	(*SysLicence)(nil),       // 113: msp.mnt.SysLicence
	(*LicenceState)(nil),     // 114: msp.mnt.LicenceState
	(*LicenceStateList)(nil), // 115: msp.mnt.LicenceStateList
	(*FileInfo)(nil),         // 116: msp.mnt.FileInfo
	(*Resource)(nil),         // 117: msp.mnt.Resource
	(*Recoder)(nil),          // 118: msp.mnt.Recoder
	(*Recoders)(nil),         // 119: msp.mnt.Recoders
	(*RecoderBoard)(nil),     // 120: msp.mnt.RecoderBoard
	(*RecoderBoards)(nil),    // 121: msp.mnt.RecoderBoards
	(*PlatInfo)(nil),         // 122: msp.mnt.PlatInfo
	(*PlatInfos)(nil),        // 123: msp.mnt.PlatInfos
	(*CascChnl)(nil),         // 124: msp.mnt.CascChnl
	(*CascChnls)(nil),        // 125: msp.mnt.CascChnls
	(*CascPipe)(nil),         // 126: msp.mnt.CascPipe
	(*CashChnlPrm)(nil),      // 127: msp.mnt.CashChnlPrm
	(*TvBasic)(nil),          // 128: msp.mnt.TvBasic
	(*TvList)(nil),           // 129: msp.mnt.TvList
	(*TvCell)(nil),           // 130: msp.mnt.TvCell
	(*TvCellList)(nil),       // 131: msp.mnt.TvCellList
	(*TvInfo)(nil),           // 132: msp.mnt.TvInfo
	(*TvBack)(nil),           // 133: msp.mnt.TvBack
	(*TvBackList)(nil),       // 134: msp.mnt.TvBackList
	(*BackTrans)(nil),        // 135: msp.mnt.BackTrans
	(*BackTransList)(nil),    // 136: msp.mnt.BackTransList
	(*BackState)(nil),        // 137: msp.mnt.BackState
	(*OSD)(nil),              // 138: msp.mnt.OSD
	(*OSDList)(nil),          // 139: msp.mnt.OSDList
	(*OsdStatus)(nil),        // 140: msp.mnt.OsdStatus
	(*OsdStatusList)(nil),    // 141: msp.mnt.OsdStatusList
	(*FileTrans)(nil),        // 142: msp.mnt.FileTrans
	(*OsdFile)(nil),          // 143: msp.mnt.OsdFile
	(*OSDCtrl)(nil),          // 144: msp.mnt.OSDCtrl
	(*TvState)(nil),          // 145: msp.mnt.TvState
	(*Login)(nil),            // 146: msp.mnt.Login
	(*LoginAck)(nil),         // 147: msp.mnt.LoginAck
	(*PlatSn)(nil),           // 148: msp.mnt.PlatSn
	(*Kdmid)(nil),            // 149: msp.mnt.Kdmid
	(*User)(nil),             // 150: msp.mnt.User
	(*UserRes)(nil),          // 151: msp.mnt.UserRes
	(*UserResList)(nil),      // 152: msp.mnt.UserResList
	(*UserList)(nil),         // 153: msp.mnt.UserList
	(*UserLockState)(nil),    // 154: msp.mnt.UserLockState
	(*UserState)(nil),        // 155: msp.mnt.UserState
	(*UserStateList)(nil),    // 156: msp.mnt.UserStateList
	(*WinState)(nil),         // 157: msp.mnt.WinState
	(*Subwindow)(nil),        // 158: msp.mnt.Subwindow
	(*MergeWnd)(nil),         // 159: msp.mnt.MergeWnd
	(*MergeWnds)(nil),        // 160: msp.mnt.MergeWnds
	(*Rect)(nil),             // 161: msp.mnt.Rect
	(*Window)(nil),           // 162: msp.mnt.Window
	(*Windows)(nil),          // 163: msp.mnt.Windows
	(*WndDesc)(nil),          // 164: msp.mnt.WndDesc
	(*Reorder)(nil),          // 165: msp.mnt.Reorder
	(*Ptz)(nil),              // 166: msp.mnt.Ptz
	(*RealPlay)(nil),         // 167: msp.mnt.RealPlay
	(*PcBdInfo)(nil),         // 168: msp.mnt.PcBdInfo
	(*PcBdInfoList)(nil),     // 169: msp.mnt.PcBdInfoList
	(*anypb.Any)(nil),        // 170: google.protobuf.Any
}
var file_msp_cnt_proto_depIdxs = []int32{
	8,   // 0: msp.mnt.Msg.head:type_name -> msp.mnt.Head
	170, // 1: msp.mnt.Msg.body:type_name -> google.protobuf.Any
	15,  // 2: msp.mnt.NetCfgList.net:type_name -> msp.mnt.NetCfg
	18,  // 3: msp.mnt.UmtList.umt:type_name -> msp.mnt.Umt
	21,  // 4: msp.mnt.UmtDecList.umtdec:type_name -> msp.mnt.UmtDec
	20,  // 5: msp.mnt.UmtStateList.state:type_name -> msp.mnt.UmtState
	24,  // 6: msp.mnt.DecModeList.mode:type_name -> msp.mnt.DecMode
	26,  // 7: msp.mnt.RdBoxList.rdbox:type_name -> msp.mnt.RdBox
	28,  // 8: msp.mnt.RdPortList.rdport:type_name -> msp.mnt.RdPort
	30,  // 9: msp.mnt.RdOutputList.rdout:type_name -> msp.mnt.RdOutput
	32,  // 10: msp.mnt.BoxExtList.box:type_name -> msp.mnt.BoxExt
	28,  // 11: msp.mnt.RdPortUpdate.context:type_name -> msp.mnt.RdPort
	14,  // 12: msp.mnt.PrePlan.chn:type_name -> msp.mnt.GroupMem
	35,  // 13: msp.mnt.PrePlans.plan:type_name -> msp.mnt.PrePlan
	14,  // 14: msp.mnt.GroupMems.chn:type_name -> msp.mnt.GroupMem
	39,  // 15: msp.mnt.QueryChnList.chn:type_name -> msp.mnt.QueryChn
	41,  // 16: msp.mnt.ChnInfo.base:type_name -> msp.mnt.ChnBasic
	42,  // 17: msp.mnt.ChnInfoList.chn:type_name -> msp.mnt.ChnInfo
	44,  // 18: msp.mnt.ChnGroupState.group:type_name -> msp.mnt.ChnGroup
	44,  // 19: msp.mnt.ChnGroupList.chngroup:type_name -> msp.mnt.ChnGroup
	14,  // 20: msp.mnt.GroupMemList.groupmen:type_name -> msp.mnt.GroupMem
	48,  // 21: msp.mnt.ChnNetEnalbeList.chnnetnable:type_name -> msp.mnt.ChnNetEnalbe
	52,  // 22: msp.mnt.EdidList.edid:type_name -> msp.mnt.Edid
	54,  // 23: msp.mnt.UmtGroupList.umtgroup:type_name -> msp.mnt.UmtGroup
	56,  // 24: msp.mnt.UmtChnList.umtchn:type_name -> msp.mnt.UmtChn
	56,  // 25: msp.mnt.UmtChnState.dev:type_name -> msp.mnt.UmtChn
	58,  // 26: msp.mnt.UmtChnStateList.umtchnstate:type_name -> msp.mnt.UmtChnState
	63,  // 27: msp.mnt.DevInfo.base:type_name -> msp.mnt.DevBasic
	64,  // 28: msp.mnt.DevList.dev:type_name -> msp.mnt.DevInfo
	67,  // 29: msp.mnt.SearchDevList.dev:type_name -> msp.mnt.SearchDev
	69,  // 30: msp.mnt.RegDevList.dev:type_name -> msp.mnt.RegDev
	71,  // 31: msp.mnt.FwList.fw:type_name -> msp.mnt.FwInfo
	73,  // 32: msp.mnt.BatchCfgList.batch:type_name -> msp.mnt.BatchCfg
	79,  // 33: msp.mnt.KvmInfo.arraytv:type_name -> msp.mnt.KvmTv
	80,  // 34: msp.mnt.KvmInfoList.kvminfo:type_name -> msp.mnt.KvmInfo
	78,  // 35: msp.mnt.MonitorInfo.advhor:type_name -> msp.mnt.Advanced
	78,  // 36: msp.mnt.MonitorInfo.advver:type_name -> msp.mnt.Advanced
	83,  // 37: msp.mnt.PushCfg.dstid:type_name -> msp.mnt.KvmPush
	85,  // 38: msp.mnt.KvmGroupList.kvmgroup:type_name -> msp.mnt.KvmGroup
	11,  // 39: msp.mnt.KvmGroupInfo.member:type_name -> msp.mnt.ValueU32
	85,  // 40: msp.mnt.KvmGroupInfo.group:type_name -> msp.mnt.KvmGroup
	88,  // 41: msp.mnt.KvmFile.param:type_name -> msp.mnt.FileParam
	80,  // 42: msp.mnt.KvmCfgState.kvm:type_name -> msp.mnt.KvmInfo
	92,  // 43: msp.mnt.KvmStateList.kvmstate:type_name -> msp.mnt.KvmState
	94,  // 44: msp.mnt.PowerPrms.powerprm:type_name -> msp.mnt.PowerPrm
	97,  // 45: msp.mnt.PcInfoList.pcinfo:type_name -> msp.mnt.PcInfo
	100, // 46: msp.mnt.Schemes.scheme:type_name -> msp.mnt.Scheme
	102, // 47: msp.mnt.PollPrm.beid:type_name -> msp.mnt.Tswid
	105, // 48: msp.mnt.Poll.pollmem:type_name -> msp.mnt.PollMem
	103, // 49: msp.mnt.Poll.param:type_name -> msp.mnt.PollPrm
	102, // 50: msp.mnt.Poll.beid:type_name -> msp.mnt.Tswid
	105, // 51: msp.mnt.PollMems.pollmem:type_name -> msp.mnt.PollMem
	11,  // 52: msp.mnt.SchemeState.state:type_name -> msp.mnt.ValueU32
	100, // 53: msp.mnt.SchemeState.scheme:type_name -> msp.mnt.Scheme
	102, // 54: msp.mnt.PollState.beid:type_name -> msp.mnt.Tswid
	108, // 55: msp.mnt.PollStates.pollstate:type_name -> msp.mnt.PollState
	114, // 56: msp.mnt.LicenceStateList.licence:type_name -> msp.mnt.LicenceState
	117, // 57: msp.mnt.Recoder.resource:type_name -> msp.mnt.Resource
	118, // 58: msp.mnt.Recoders.recoder:type_name -> msp.mnt.Recoder
	120, // 59: msp.mnt.RecoderBoards.recoderboard:type_name -> msp.mnt.RecoderBoard
	122, // 60: msp.mnt.PlatInfos.platinfo:type_name -> msp.mnt.PlatInfo
	124, // 61: msp.mnt.CascChnls.cascchnl:type_name -> msp.mnt.CascChnl
	124, // 62: msp.mnt.CashChnlPrm.cascchnl:type_name -> msp.mnt.CascChnl
	128, // 63: msp.mnt.TvList.tvbasic:type_name -> msp.mnt.TvBasic
	130, // 64: msp.mnt.TvCellList.tvcell:type_name -> msp.mnt.TvCell
	128, // 65: msp.mnt.TvInfo.base:type_name -> msp.mnt.TvBasic
	130, // 66: msp.mnt.TvInfo.cellls:type_name -> msp.mnt.TvCell
	133, // 67: msp.mnt.TvBackList.tvback:type_name -> msp.mnt.TvBack
	135, // 68: msp.mnt.BackTransList.backtrans:type_name -> msp.mnt.BackTrans
	133, // 69: msp.mnt.BackState.back:type_name -> msp.mnt.TvBack
	138, // 70: msp.mnt.OSDList.osd:type_name -> msp.mnt.OSD
	140, // 71: msp.mnt.OsdStatusList.osdstatus:type_name -> msp.mnt.OsdStatus
	11,  // 72: msp.mnt.TvState.state:type_name -> msp.mnt.ValueU32
	128, // 73: msp.mnt.TvState.base:type_name -> msp.mnt.TvBasic
	151, // 74: msp.mnt.UserResList.res:type_name -> msp.mnt.UserRes
	150, // 75: msp.mnt.UserList.user:type_name -> msp.mnt.User
	150, // 76: msp.mnt.UserState.user:type_name -> msp.mnt.User
	11,  // 77: msp.mnt.UserState.state:type_name -> msp.mnt.ValueU32
	155, // 78: msp.mnt.UserStateList.userstate:type_name -> msp.mnt.UserState
	162, // 79: msp.mnt.WinState.window:type_name -> msp.mnt.Window
	102, // 80: msp.mnt.MergeWnd.id:type_name -> msp.mnt.Tswid
	158, // 81: msp.mnt.MergeWnd.subwindow:type_name -> msp.mnt.Subwindow
	159, // 82: msp.mnt.MergeWnds.mergewnd:type_name -> msp.mnt.MergeWnd
	161, // 83: msp.mnt.Window.layout:type_name -> msp.mnt.Rect
	161, // 84: msp.mnt.Window.cut:type_name -> msp.mnt.Rect
	162, // 85: msp.mnt.Windows.window:type_name -> msp.mnt.Window
	102, // 86: msp.mnt.WndDesc.id:type_name -> msp.mnt.Tswid
	102, // 87: msp.mnt.Ptz.beid:type_name -> msp.mnt.Tswid
	168, // 88: msp.mnt.PcBdInfoList.pcinfo:type_name -> msp.mnt.PcBdInfo
	89,  // [89:89] is the sub-list for method output_type
	89,  // [89:89] is the sub-list for method input_type
	89,  // [89:89] is the sub-list for extension type_name
	89,  // [89:89] is the sub-list for extension extendee
	0,   // [0:89] is the sub-list for field type_name
}

func init() { file_msp_cnt_proto_init() }
func file_msp_cnt_proto_init() {
	if File_msp_cnt_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_msp_cnt_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Msg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Head); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*String); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Query); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueU32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Notify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupMem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetCfgList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Lancfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Umt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UmtList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UmtState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UmtDec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UmtDecList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UmtStateList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DecModeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RdBox); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RdBoxList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RdPort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RdPortList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RdOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RdOutputList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoxExt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoxExtList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RdPortUpdate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrePlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrePlans); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupMems); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ids); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryChn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryChnList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChnBasic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChnInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChnInfoList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChnGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChnGroupState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChnGroupList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupMemList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChnNetEnalbe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChnNetEnalbeList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChnMode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChnEdid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Edid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdidList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UmtGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UmtGroupList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UmtChn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UmtChnList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UmtChnState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UmtChnStateList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComPtz); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Property); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DevBasic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DevInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DevList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchDev); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchDevList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegDev); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegDevList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FwInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FwList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchCfgList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchProg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Advanced); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KvmTv); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KvmInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KvmInfoList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonitorInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KvmPush); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushCfg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KvmGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KvmGroupList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KvmGroupInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KvmFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KvmFileNotify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KvmCfgState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KvmState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KvmStateList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PowerPrm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChnList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PowerPrms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PcInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PcInfoList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PcList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scheme); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schemes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tswid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PollPrm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Poll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PollMem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PollMems); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchemeState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PollState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PollStates); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilterForm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Time); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysLicence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LicenceState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LicenceStateList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Recoder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Recoders); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoderBoard); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecoderBoards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlatInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlatInfos); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CascChnl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CascChnls); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CascPipe); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CashChnlPrm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TvBasic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TvList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TvCell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TvCellList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TvInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TvBack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TvBackList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackTrans); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackTransList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OSD); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OSDList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OsdStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OsdStatusList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileTrans); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OsdFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OSDCtrl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TvState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Login); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginAck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlatSn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Kdmid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserResList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLockState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserStateList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WinState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subwindow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergeWnd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergeWnds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rect); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Window); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Windows); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WndDesc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reorder); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ptz); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealPlay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PcBdInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msp_cnt_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PcBdInfoList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_msp_cnt_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   163,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_msp_cnt_proto_goTypes,
		DependencyIndexes: file_msp_cnt_proto_depIdxs,
		EnumInfos:         file_msp_cnt_proto_enumTypes,
		MessageInfos:      file_msp_cnt_proto_msgTypes,
	}.Build()
	File_msp_cnt_proto = out.File
	file_msp_cnt_proto_rawDesc = nil
	file_msp_cnt_proto_goTypes = nil
	file_msp_cnt_proto_depIdxs = nil
}
